from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from pb_client import PBClient
from config import TELEGRAM_BOT_TOKEN, ADMIN_IDS
import random
import os
import tempfile
import requests
from PIL import Image
from telegram.ext import ConversationHandler, MessageHandler, filters
from collections import defaultdict
import httpx
import asyncio
from config import AUCTION_CHANNEL_ID

pb = PBClient()

# –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (—Å—É–º–º–∞ = 100)
RARITY_CHANCES = [
    (1, 40),   # 1 –∑–≤–µ–∑–¥–∞ - 29%
    (2, 32),   # 2 –∑–≤–µ–∑–¥—ã - 30%
    (3, 20),   # 3 –∑–≤–µ–∑–¥—ã - 25%
    (4, 5),   # 4 –∑–≤–µ–∑–¥—ã - 12%
    (5, 2),    # 5 –∑–≤—ë–∑–¥ - 3%
    (6, 0.5),    # 6 –∑–≤—ë–∑–¥ - 0.5%
]
RARITY_WEIGHTS = [chance for _, chance in RARITY_CHANCES]
RARITY_VALUES = [rarity for rarity, _ in RARITY_CHANCES]

PULL_COST = 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤ –∑–≤—ë–∑–¥–∞—Ö 
PULL10_COST = 90  # –°—Ç–æ–∏–º–æ—Å—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫ (—Å–∫–∏–¥–∫–∞)

ADD_NAME, ADD_GROUP, ADD_ALBUM, ADD_RARITY, ADD_IMAGE, ADD_CONFIRM = range(6)
AUCTION_PRICE, AUCTION_DURATION, AUCTION_CONFIRM = range(10, 13)
auction_data = {}

addcard_data = {}

message_counters = defaultdict(int)

PROMO_ENTER, = range(20, 21)

EXCHANGE_SELECT, EXCHANGE_CONFIRM = range(40, 42)

async def promo_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = get_reply_target(update)
    await target.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    return PROMO_ENTER

async def promo_enter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    promo = pb.get_promo(code)
    if not promo:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    if not promo.get("is_active", True):
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return ConversationHandler.END
    usage_limit = promo.get("usage_limit", 1)
    used_by = promo.get("used_by", [])
    if len(used_by) >= usage_limit:
        await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
        return ConversationHandler.END
    if pb_user["id"] in used_by:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        return ConversationHandler.END
    # –í—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É
    reward = promo.get("reward", 0)
    pb.update_user_stars_and_pity(pb_user["id"], pb_user.get("stars", 0) + reward, pb_user.get("pity_legendary", 0), pb_user.get("pity_void", 0))
    pb.use_promo(promo["id"], pb_user["id"])
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥.")
    return ConversationHandler.END

async def promo_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
ADD_PROMO_CODE, ADD_PROMO_REWARD, ADD_PROMO_LIMIT = range(30, 33)
addpromo_data = {}

async def addpromo_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    addpromo_data[user_id] = {}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã):")
    return ADD_PROMO_CODE

async def addpromo_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addpromo_data[user_id]["code"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (—Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥):")
    return ADD_PROMO_REWARD

async def addpromo_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        reward = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return ADD_PROMO_REWARD
    addpromo_data[user_id]["reward"] = reward
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—á–∏—Å–ª–æ, 0 = –±–µ–∑–ª–∏–º–∏—Ç):")
    return ADD_PROMO_LIMIT

async def addpromo_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        limit = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return ADD_PROMO_LIMIT
    addpromo_data[user_id]["usage_limit"] = limit if limit > 0 else 1000000
    data = addpromo_data[user_id]
    pb.add_promo(data["code"], data["reward"], data["usage_limit"], True)
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {data['code']} –¥–æ–±–∞–≤–ª–µ–Ω! –ù–∞–≥—Ä–∞–¥–∞: {data['reward']} –∑–≤—ë–∑–¥, –ª–∏–º–∏—Ç: {data['usage_limit']}")
    addpromo_data.pop(user_id, None)
    return ConversationHandler.END

async def addpromo_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addpromo_data.pop(user_id, None)
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def get_reply_target(update, prefer_edit=False):
    if prefer_edit and hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
        return update.callback_query.message
    if hasattr(update, 'message') and update.message:
        return update.message
    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
        return update.callback_query.message
    return None

def back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = get_reply_target(update)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        pb.create_user(user.id, user.full_name)
        if target:
            await target.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.full_name}</b>!\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.", parse_mode="HTML")
    else:
        if target:
            await target.reply_text(f"‚ú® –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{user.full_name}</b>!", parse_mode="HTML")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = get_reply_target(update)
    if target:
        await target.reply_text(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<b>/menu</b> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "<b>/profile</b> ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "<b>/pull</b> ‚Äî –≥–∞—á–∞ (1 –ø–æ–ø—ã—Ç–∫–∞)\n"
            "<b>/pull10</b> ‚Äî –≥–∞—á–∞ (10 –ø–æ–ø—ã—Ç–æ–∫)\n"
            "<b>/inventory</b> ‚Äî –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
            "<b>/daily</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–∫–∞\n"
            "<b>/history</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫\n"
            "<b>/pity</b> ‚Äî pity-—Å—á—ë—Ç—á–∏–∫–∏\n"
            "<b>/leaderboard</b> ‚Äî —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
            "<b>/settings</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "<b>/help</b> ‚Äî –ø–æ–º–æ—â—å",
            parse_mode="HTML"
        )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    rank = pb.get_rank(pb_user.get('level', 1))
    text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"<b>–ò–º—è:</b> {pb_user.get('name', '')}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {pb_user.get('level', 1)} <i>({rank})</i>\n"
        f"<b>–û–ø—ã—Ç:</b> {pb_user.get('exp', 0)} / {pb.exp_to_next_level(pb_user.get('level', 1))}\n"
        f"<b>‚≠ê –ó–≤—ë–∑–¥—ã:</b> {pb_user.get('stars', 0)}\n"
        f"<b>üéØ Pity Legendary:</b> {pb_user.get('pity_legendary', 0)} / 80\n"
        f"<b>üï≥Ô∏è Pity Void:</b> {pb_user.get('pity_void', 0)} / 165"
    )
    if target:
        if prefer_edit:
            await target.edit_text(text, parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text(text, parse_mode="HTML", reply_markup=back_keyboard())

# --- –ì–∞—á–∞ –ª–æ–≥–∏–∫–∞ ---
def choose_rarity(pity_legendary, pity_void):
    # Pity: 80 - –≥–∞—Ä–∞–Ω—Ç 5*, 165 - –≥–∞—Ä–∞–Ω—Ç 6*
    if pity_void >= 165:
        return 6
    if pity_legendary >= 80:
        return 5
    return random.choices(RARITY_VALUES, weights=RARITY_WEIGHTS, k=1)[0]

def apply_overlay(card_image_url, rarity):
    if rarity not in (3, 4, 5, 6):
        return None  # –≠—Ñ—Ñ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è 3‚òÖ –∏ –≤—ã—à–µ
    overlay_path = os.path.join(os.path.dirname(__file__), "overlays", f"overlay_{rarity}.png")
    if not os.path.exists(overlay_path):
        return None  # –ù–µ—Ç –æ–≤–µ—Ä–ª–µ—è –¥–ª—è —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_card:
        resp = requests.get(card_image_url)
        temp_card.write(resp.content)
        temp_card_path = temp_card.name
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    card_img = Image.open(temp_card_path).convert("RGBA")
    overlay_img = Image.open(overlay_path).convert("RGBA")
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
    overlay_img = overlay_img.resize(card_img.size, Image.Resampling.LANCZOS)
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    combined = Image.alpha_composite(card_img, overlay_img)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    out_path = tempfile.mktemp(suffix=".png")
    combined.save(out_path, format="PNG")
    os.unlink(temp_card_path)
    return out_path

async def pull_once(user, pb_user, update, pull_type="single"):
    target = get_reply_target(update)
    pity_legendary = pb_user.get("pity_legendary", 0)
    pity_void = pb_user.get("pity_void", 0)
    stars = pb_user.get("stars", 0)
    user_id = pb_user["id"]
    level = pb_user.get("level", 1)
    exp = pb_user.get("exp", 0)

    if stars < PULL_COST:
        if target:
            await target.reply_text("<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏!</b>", parse_mode="HTML")
        return

    rarity = choose_rarity(pity_legendary, pity_void)
    card = pb.get_random_card_by_rarity(rarity)
    if not card:
        if target:
            await target.reply_text(f"–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é {rarity}‚òÖ –≤ –±–∞–∑–µ!", parse_mode="HTML")
        return

    # Pity-—Å—á—ë—Ç—á–∏–∫–∏
    if rarity == 6:
        pity_void = 0
        pity_legendary += 1
    elif rarity == 5:
        pity_legendary = 0
        pity_void += 1
    else:
        pity_legendary += 1
        pity_void += 1

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
    stars -= PULL_COST
    pb.update_user_stars_and_pity(user_id, stars, pity_legendary, pity_void)
    pb.add_card_to_user(user_id, card["id"])
    pb.add_pull_history(user_id, card["id"], pull_type)

    # –û–ø—ã—Ç –∑–∞ –∫–∞—Ä—Ç–æ—á–∫—É
    base_exp = PBClient.RARITY_EXP.get(card["rarity"], 1)
    is_first = pb.is_first_card(user_id, card["id"])
    total_exp = base_exp + (base_exp // 2 if is_first else 0)
    updated_user, levelup = pb.add_exp_and_check_levelup(user_id, level, exp, total_exp)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = f"<b>–í—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞:</b> <b>{card['name']}</b> (<i>{card['group']}</i>)\n<b>–†–µ–¥–∫–æ—Å—Ç—å:</b> <b>{card['rarity']}‚òÖ</b>\n<b>+{base_exp} –æ–ø—ã—Ç–∞</b>"
    if is_first:
        text += " <i>(–ø–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ, –±–æ–Ω—É—Å +50%)</i>"
    if levelup:
        rank = pb.get_rank(updated_user.get('level', 1))
        text += f"\n<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω: {updated_user.get('level', 1)} ({rank})</b>"
    if card.get("image_url"):
        overlayed_path = apply_overlay(card["image_url"], card["rarity"])
        if overlayed_path:
            with open(overlayed_path, "rb") as img_file:
                await target.reply_photo(img_file, caption=text, parse_mode="HTML")
            os.unlink(overlayed_path)
        else:
            await target.reply_photo(card["image_url"], caption=text, parse_mode="HTML")
    else:
        if target:
            await target.reply_text(text, parse_mode="HTML")

async def pull(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await pull_once(update.effective_user, pb.get_user_by_telegram_id(update.effective_user.id), update, pull_type="single")

async def pull10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await pull10_impl(update.effective_user, pb.get_user_by_telegram_id(update.effective_user.id), update)

async def pull10_impl(user, pb_user, update):
    target = get_reply_target(update)
    stars = pb_user.get("stars", 0)
    if stars < PULL10_COST:
        if target:
            await target.reply_text("<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è 10 –ø–æ–ø—ã—Ç–æ–∫!</b>", parse_mode="HTML")
        return
    user_id = pb_user["id"]
    pity_legendary = pb_user.get("pity_legendary", 0)
    pity_void = pb_user.get("pity_void", 0)
    level = pb_user.get("level", 1)
    exp = pb_user.get("exp", 0)
    stars -= PULL10_COST
    results = ["<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã 10 –ø–æ–ø—ã—Ç–æ–∫:</b>"]
    total_exp = 0
    levelup = False
    media = []
    captions = []
    for i in range(10):
        rarity = choose_rarity(pity_legendary, pity_void)
        card = pb.get_random_card_by_rarity(rarity)
        if not card:
            results.append(f"{i+1}. –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é {rarity}‚òÖ!")
            continue
        if rarity == 6:
            pity_void = 0
            pity_legendary += 1
        elif rarity == 5:
            pity_legendary = 0
            pity_void += 1
        else:
            pity_legendary += 1
            pity_void += 1
        pb.add_card_to_user(user_id, card["id"])
        pb.add_pull_history(user_id, card["id"], "multi")
        base_exp = PBClient.RARITY_EXP.get(card["rarity"], 1)
        is_first = pb.is_first_card(user_id, card["id"])
        exp_gain = base_exp + (base_exp // 2 if is_first else 0)
        total_exp += exp_gain
        caption = (
            f"<b>{card['name']}</b> (<i>{card['group']}</i>)\n"
            f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-')}</b>\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card['rarity']}‚òÖ</b> <b>+{exp_gain} –æ–ø—ã—Ç–∞</b>"
        )
        if is_first:
            caption += " <i>(–ø–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ)</i>"
        overlayed_path = apply_overlay(card.get("image_url"), card.get("rarity"))
        if overlayed_path:
            media.append(InputMediaPhoto(open(overlayed_path, "rb"), caption=caption, parse_mode="HTML"))
            captions.append(overlayed_path)
        elif card.get("image_url"):
            media.append(InputMediaPhoto(card["image_url"], caption=caption, parse_mode="HTML"))
            captions.append(None)
        else:
            results.append(f"{i+1}. {card['name']} ‚Äî –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    updated_user, levelup = pb.add_exp_and_check_levelup(user_id, level, exp, total_exp)
    pb.update_user_stars_and_pity(user_id, stars, pity_legendary, pity_void)
    if levelup:
        rank = pb.get_rank(updated_user.get('level', 1))
        results.append(f"\n<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω: {updated_user.get('level', 1)} ({rank})</b>")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if media:
        try:
            await target.reply_media_group(media)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∞–ª—å–±–æ–º ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π
            for m in media:
                await target.reply_photo(m.media, caption=m.caption, parse_mode="HTML")
        # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in captions:
            if path:
                try:
                    os.unlink(path)
                except Exception:
                    pass
    if results and len(results) > 1:
        await target.reply_text("\n".join(results), parse_mode="HTML")

# --- –ù–æ–≤—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –∞–ª—å–±–æ–º–∞–º ---
async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    cards = pb.get_user_inventory(user_id)
    if not cards:
        if target:
            if prefer_edit:
                await target.edit_text("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!", parse_mode="HTML", reply_markup=back_keyboard())
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    group_set = set()
    for c in cards:
        card = c.get("expand", {}).get("card_id", {})
        if not card:
            continue
        group = card.get("group", "-")
        group_set.add(group)
    keyboard = []
    for group in sorted(group_set):
        keyboard.append([InlineKeyboardButton(f"{group}", callback_data=f"invgroup_{group}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")])
    text = "<b>üé¥ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    if target:
        if prefer_edit:
            await target.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
        else:
            await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

# --- Callback: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, –∑–∞—Ç–µ–º –∞–ª—å–±–æ–º–∞ ---
async def inventory_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    group = query.data.replace("invgroup_", "")
    user_id = query.from_user.id
    pb_user = pb.get_user_by_telegram_id(user_id)
    cards = pb.get_user_inventory(pb_user["id"])
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–ª—å–±–æ–º–∞–º –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    album_set = set()
    for c in cards:
        card = c.get("expand", {}).get("card_id", {})
        if not card:
            continue
        if card.get("group", "-") == group:
            album_set.add(card.get("album", "-"))
    keyboard = []
    for album in sorted(album_set):
        keyboard.append([InlineKeyboardButton(f"{album}", callback_data=f"invalbum_{group}__{album}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory")])
    text = f"<b>–ì—Ä—É–ø–ø–∞:</b> <b>{group}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º:"
    try:
        if query.message:
            if query.message.photo:
                await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# --- Callback: –≤—ã–±–æ—Ä –∞–ª—å–±–æ–º–∞, –∑–∞—Ç–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ ---
async def inventory_album_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.replace("invalbum_", "")
    group, album = data.split("__", 1)
    user_id = query.from_user.id
    pb_user = pb.get_user_by_telegram_id(user_id)
    cards = pb.get_user_inventory(pb_user["id"])
    # –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–ª—å–±–æ–º–µ –∏ –≥—Ä—É–ø–ø–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–æ—Ç 6 –¥–æ 1)
    filtered_cards = [
        c for c in cards
        if c.get("expand", {}).get("card_id", {}).get("group", "-") == group and c.get("expand", {}).get("card_id", {}).get("album", "-") == album
    ]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–¥–∫–æ—Å—Ç–∏
    filtered_cards.sort(key=lambda c: c.get("expand", {}).get("card_id", {}).get("rarity", 1), reverse=True)
    card_buttons = []
    for c in filtered_cards:
        card = c.get("expand", {}).get("card_id", {})
        btn_text = f"{card.get('name', '???')} ‚Äî {card.get('rarity', '?')}‚òÖ √ó{c.get('count', 1)}"
        card_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"showcard_{card.get('id')}")])
    card_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"invgroup_{group}")])
    text = f"<b>–ì—Ä—É–ø–ø–∞:</b> <b>{group}</b>\n<b>–ê–ª—å–±–æ–º:</b> <b>{album}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É:"
    try:
        if query.message:
            if query.message.photo:
                await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))
            else:
                await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))
        else:
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))

async def showcard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("showcard_", "")
    url = f"{pb.base_url}/collections/cards/records/{card_id}"
    resp = requests.get(url, headers=pb.headers)
    if resp.status_code != 200:
        await query.edit_message_text("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    card = resp.json()
    user_id = query.from_user.id
    user_cards = pb.get_user_inventory(pb.get_user_by_telegram_id(user_id)["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    can_auction = count > 0
    text = (
        f"<b>{card.get('name')}</b>\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{card.get('group')}</b>\n"
        f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-')}</b>\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card.get('rarity')}‚òÖ</b>\n"
        f"–í –Ω–∞–ª–∏—á–∏–∏: <b>{count}</b>"
    )
    keyboard = []
    if can_auction:
        keyboard.append([InlineKeyboardButton("üí∏ –í—ã–ª–æ–∂–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω", callback_data=f"auction_{card_id}")])
    # –ö–Ω–æ–ø–∫–∞ —Å–¥–∞—á–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if count > 1:
        keyboard.append([InlineKeyboardButton(f"‚ôªÔ∏è –°–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç ({count-1})", callback_data=f"exchange_{card_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory")])
    overlayed_path = apply_overlay(card.get("image_url"), card.get("rarity"))
    if overlayed_path:
        with open(overlayed_path, "rb") as img_file:
            await query.message.reply_photo(img_file, caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        os.unlink(overlayed_path)
    elif card.get("image_url"):
        await query.message.reply_photo(card.get("image_url"), caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

async def auction_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("auction_", "")
    user_id = query.from_user.id
    auction_data[user_id] = {"card_id": card_id}
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö:")
    return AUCTION_PRICE

async def auction_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        price = int(update.message.text.strip())
        if price < 1:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return AUCTION_PRICE
    auction_data[user_id]["price"] = price
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞
    keyboard = [
        [InlineKeyboardButton("12 —á", callback_data="auction_dur_12"),
         InlineKeyboardButton("24 —á", callback_data="auction_dur_24"),
         InlineKeyboardButton("48 —á", callback_data="auction_dur_48")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AUCTION_DURATION

async def auction_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    if query.data.startswith("auction_dur_"):
        hours = int(query.data.split("_")[-1])
        auction_data[user_id]["duration"] = hours
        data = auction_data[user_id]
        text = f"–í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω –∑–∞ {data['price']} –∑–≤—ë–∑–¥ –Ω–∞ {hours} —á?"
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞", callback_data="auction_yes"), InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="auction_no")]]
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return AUCTION_CONFIRM
    await query.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞.")
    return ConversationHandler.END

async def auction_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    if query.data == "auction_no":
        await query.edit_message_text("‚ùå –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        auction_data.pop(user_id, None)
        return ConversationHandler.END
    data = auction_data[user_id]
    pb_user = pb.get_user_by_telegram_id(user_id)
    # –£–º–µ–Ω—å—à–∞–µ–º count –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_cards = pb.get_user_inventory(pb_user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == data["card_id"] or (c.get("expand", {}).get("card_id", {}).get("id") == data["card_id"])), None)
    if user_card and user_card.get("count", 0) > 0:
        url = f"{pb.base_url}/collections/user_cards/records/{user_card['id']}"
        new_count = user_card.get("count", 1) - 1
        httpx.patch(url, headers=pb.headers, json={"count": new_count})
    pb.create_auction(data["card_id"], pb_user["id"], data["price"], data["duration"])
    await query.edit_message_text("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω!")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ
    if AUCTION_CHANNEL_ID:
        card = pb.get_card(data["card_id"])
        text = (
            f"<b>–ù–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω!</b>\n"
            f"–ö–∞—Ä—Ç–æ—á–∫–∞: <b>{card.get('name', '???')}</b> ({card.get('group', '-')})\n"
            f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-')}</b>\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card.get('rarity', '?')}‚òÖ</b>\n"
            f"–¶–µ–Ω–∞: <b>{data['price']}‚≠ê</b>\n"
            f"–°—Ä–æ–∫: <b>{data['duration']} —á</b>\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{pb_user.get('name', '-')[:20]}</b>"
        )
        try:
            if card.get("image_url"):
                await context.bot.send_photo(
                    chat_id=AUCTION_CHANNEL_ID,
                    photo=card["image_url"],
                    caption=text,
                    parse_mode="HTML"
                )
            else:
                await context.bot.send_message(
                    chat_id=AUCTION_CHANNEL_ID,
                    text=text,
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"[AUCTION CHANNEL ERROR] {e}")
    auction_data.pop(user_id, None)
    return ConversationHandler.END

async def auctions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    auctions = pb.get_active_auctions()
    if not auctions:
        keyboard = [[InlineKeyboardButton("üé¥ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")]]
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω —á–µ—Ä–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"
        if prefer_edit:
            await target.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    keyboard = []
    for lot in auctions:
        card = lot.get("expand", {}).get("card_id", {})
        seller = lot.get("expand", {}).get("seller_id", {})
        btn_text = f"{card.get('name', '???')} ({card.get('group', '-')}) ‚Äî {card.get('rarity', '?')}‚òÖ –∑–∞ {lot.get('price')}‚≠ê –æ—Ç {seller.get('name', '-')[:12]}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"buyauction_{lot['id']}")])
    text = "<b>–ê—É–∫—Ü–∏–æ–Ω:</b>"
    if prefer_edit:
        await target.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

async def buyauction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lot_id = query.data.replace("buyauction_", "")
    lot = pb.get_auction(lot_id)
    card = lot.get("expand", {}).get("card_id", {})
    price = lot.get("price")
    buyer_id = query.from_user.id
    pb_buyer = pb.get_user_by_telegram_id(buyer_id)
    if pb_buyer.get("stars", 0) < price:
        await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!")
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    pb.update_user_stars_and_pity(pb_buyer["id"], pb_buyer["stars"] - price, pb_buyer.get("pity_legendary", 0), pb_buyer.get("pity_void", 0))
    seller = lot.get("expand", {}).get("seller_id", {})
    if seller:
        pb_seller = pb.get_user_by_telegram_id(seller.get("telegram_id"))
        if pb_seller:
            pb.update_user_stars_and_pity(pb_seller["id"], pb_seller.get("stars", 0) + price, pb_seller.get("pity_legendary", 0), pb_seller.get("pity_void", 0))
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
            seller_tg_id = seller.get("telegram_id")
            if seller_tg_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(seller_tg_id),
                        text=f"üí∏ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ <b>{card.get('name')}</b> –±—ã–ª–∞ –∫—É–ø–ª–µ–Ω–∞ –∑–∞ <b>{price} –∑–≤—ë–∑–¥</b>!",
                        parse_mode="HTML"
                    )
                except Exception:
                    pass
    pb.add_card_to_user(pb_buyer["id"], card["id"])
    pb.finish_auction(lot_id, status="sold", winner_id=pb_buyer["id"])
    await query.edit_message_text(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ö–∞—Ä—Ç–æ—á–∫–∞ {card.get('name')} —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞.")

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    available, last_dt = pb.check_daily_available(pb_user)
    if not available:
        if target:
            if prefer_edit:
                await target.edit_text("<b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.</b>", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("<b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.</b>", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    stars = pb_user.get("stars", 0)
    updated_user, reward = pb.give_daily_reward(user_id, stars)
    if target:
        if prefer_edit:
            await target.edit_text(f"<b>üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!</b>\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ ‚ú®", parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text(f"<b>üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!</b>\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ ‚ú®", parse_mode="HTML", reply_markup=back_keyboard())

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    pulls = pb.get_pull_history(user_id, limit=10)
    if not pulls:
        if target:
            if prefer_edit:
                await target.edit_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    lines = ["<b>üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏:</b>"]
    for p in pulls:
        card = p.get("expand", {}).get("card_id", {})
        if not card:
            continue
        lines.append(f"<b>{card.get('name', '???')}</b> (<i>{card.get('group', '-')}</i>) ‚Äî <b>{card.get('rarity', '?')}‚òÖ</b> [<i>{p.get('pull_type', '')}</i>]")
    if target:
        if prefer_edit:
            await target.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())

async def pity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    pity_legendary, pity_void = pb.get_pity_status(user_id)
    if target:
        if prefer_edit:
            await target.edit_text(f"<b>üéØ Pity Legendary:</b> {pity_legendary}/80\n<b>üï≥Ô∏è Pity Void:</b> {pity_void}/165", parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text(f"<b>üéØ Pity Legendary:</b> {pity_legendary}/80\n<b>üï≥Ô∏è Pity Void:</b> {pity_void}/165", parse_mode="HTML", reply_markup=back_keyboard())

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    top = pb.get_leaderboard(limit=10)
    if not top:
        if target:
            if prefer_edit:
                await target.edit_text("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    lines = ["<b>üèÜ –¢–æ–ø –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤:</b>"]
    for i, user in enumerate(top, 1):
        name = user.get("name") or f"User {user.get('telegram_id', '')}" 
        level = user.get("level", 1)
        exp = user.get("exp", 0)
        rank = pb.get_rank(level)
        lines.append(f"{i}. <b>{name}</b> ‚Äî <b>{level}</b> <i>({rank})</i>, –æ–ø—ã—Ç: <b>{exp}</b>")
    if target:
        if prefer_edit:
            await target.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    if target:
        if prefer_edit:
            await target.edit_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.</b>", parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.</b>", parse_mode="HTML", reply_markup=back_keyboard())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    keyboard = [
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"), InlineKeyboardButton("üé¥ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton("üé≤ –ì–∞—á–∞ (1)", callback_data="pull"), InlineKeyboardButton("üîü –ì–∞—á–∞ (10)", callback_data="pull10")],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–∫–∞", callback_data="daily"), InlineKeyboardButton("üïì –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("üéØ Pity", callback_data="pity"), InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")],
        [InlineKeyboardButton("üõí –ê—É–∫—Ü–∏–æ–Ω", callback_data="auctions")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    target = get_reply_target(update, prefer_edit=prefer_edit)
    if target:
        if prefer_edit:
            await target.edit_text("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=reply_markup, parse_mode="HTML")
        else:
            await target.reply_text("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=reply_markup, parse_mode="HTML")

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    # –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' (data == 'menu')
    if data == "menu":
        await menu(update, context)
        return
    if data == "profile":
        await profile(update, context)
    elif data == "inventory":
        await inventory(update, context)
    elif data == "pull":
        await pull(update, context)
    elif data == "pull10":
        await pull10(update, context)
    elif data == "daily":
        await daily(update, context)
    elif data == "history":
        await history(update, context)
    elif data == "pity":
        await pity(update, context)
    elif data == "leaderboard":
        await leaderboard(update, context)
    elif data == "settings":
        await settings(update, context)
    elif data == "auctions":
        await auctions(update, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def addcard_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    addcard_data[user_id] = {}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏</b>:", parse_mode="HTML")
    return ADD_NAME

async def addcard_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–≥—Ä—É–ø–ø—É</b>:", parse_mode="HTML")
    return ADD_GROUP

async def addcard_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["group"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞</b>:", parse_mode="HTML")
    return ADD_ALBUM

async def addcard_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["album"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>—Ä–µ–¥–∫–æ—Å—Ç—å</b> (1-6):", parse_mode="HTML")
    return ADD_RARITY

async def addcard_rarity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        rarity = int(update.message.text.strip())
        if rarity < 1 or rarity > 6:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6!")
        return ADD_RARITY
    addcard_data[user_id]["rarity"] = rarity
    await update.message.reply_text("–í—Å—Ç–∞–≤—å—Ç–µ <b>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>:", parse_mode="HTML")
    return ADD_IMAGE

async def addcard_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["image_url"] = update.message.text.strip()
    card = addcard_data[user_id]
    text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"–ò–º—è: {card['name']}\n–ì—Ä—É–ø–ø–∞: {card['group']}\n–ê–ª—å–±–æ–º: {card['album']}\n–†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\nURL: {card['image_url']}\n\n–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="addcard_yes"), InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="addcard_no")]
    ]
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    return ADD_CONFIRM

async def addcard_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    if query.data == "addcard_no":
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        addcard_data.pop(user_id, None)
        return ConversationHandler.END
    card = addcard_data[user_id]
    try:
        pb.add_card(card["name"], card["group"], card["album"], card["rarity"], card["image_url"])
        await query.edit_message_text("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!")
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
    addcard_data.pop(user_id, None)
    return ConversationHandler.END

async def addcard_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data.pop(user_id, None)
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def group_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in ["group", "supergroup"]:
        return
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    key = (chat_id, user_id)
    message_counters[key] += 1
    if message_counters[key] % 50 == 0:
        pb_user = pb.get_user_by_telegram_id(user_id)
        if pb_user:
            new_stars = pb_user.get("stars", 0) + 25
            pb.update_user_stars_and_pity(pb_user["id"], new_stars, pb_user.get("pity_legendary", 0), pb_user.get("pity_void", 0))
            await update.message.reply_text(f"üéâ @{update.effective_user.username or update.effective_user.first_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 25 –∑–≤—ë–∑–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ!")

# --- –ù–æ–≤—ã–π callback –¥–ª—è –æ–±–º–µ–Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ---
async def exchange_duplicate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("exchange_", "")
    user_id = query.from_user.id
    user = pb.get_user_by_telegram_id(user_id)
    user_cards = pb.get_user_inventory(user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    card = user_card.get("expand", {}).get("card_id", {}) if user_card else {}
    rarity = card.get("rarity", 1)
    reward_map = {1: 1, 2: 3, 3: 10, 4: 30, 5: 100, 6: 250}
    reward = reward_map.get(rarity, 1)
    if count <= 1:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏."
        try:
            if query.message.photo:
                await query.message.edit_caption(text)
            else:
                await query.edit_message_text(text)
        except Exception as e:
            try:
                await query.message.reply_text(text)
            except Exception as e2:
                print(f"[exchange_duplicate_callback] –û—à–∏–±–∫–∞: {e} | {e2}")
        return ConversationHandler.END
    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞
    keyboard = []
    for i in range(1, min(count, 10)+1):
        keyboard.append([InlineKeyboardButton(f"{i}", callback_data=f"exchange_select_{card_id}_{i}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"showcard_{card_id}")])
    text = f"–°–∫–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ <b>{card.get('name', '?')}</b> ({rarity}‚òÖ) –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å? (–î–æ—Å—Ç—É–ø–Ω–æ: {count-1})"
    try:
        if query.message.photo:
            await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    return EXCHANGE_SELECT

async def exchange_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.replace("exchange_select_", "")
    card_id, amount = data.rsplit("_", 1)
    amount = int(amount)
    user_id = query.from_user.id
    user = pb.get_user_by_telegram_id(user_id)
    user_cards = pb.get_user_inventory(user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    card = user_card.get("expand", {}).get("card_id", {}) if user_card else {}
    rarity = card.get("rarity", 1)
    reward_map = {1: 1, 2: 3, 3: 10, 4: 30, 5: 100, 6: 250}
    reward = reward_map.get(rarity, 1)
    if count <= 1 or amount < 1 or amount > (count-1):
        try:
            if query.message.photo:
                await query.message.edit_caption("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
            else:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        except Exception:
            await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return ConversationHandler.END
    context.user_data["exchange"] = {"card_id": card_id, "amount": amount, "reward": reward, "rarity": rarity, "name": card.get("name", "?")}
    text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å <b>{amount}</b> –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ <b>{card.get('name', '?')}</b> ({rarity}‚òÖ) –∑–∞ <b>{reward*amount} –∑–≤—ë–∑–¥</b>?\n–û—Å—Ç–∞–Ω–µ—Ç—Å—è: {count-amount}"
    keyboard = [
        [InlineKeyboardButton(f"‚úÖ –î–∞, —Å–¥–∞—Ç—å {amount}", callback_data=f"exchange_confirm_bulk_{card_id}_{amount}"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"showcard_{card_id}")]
    ]
    try:
        if query.message.photo:
            await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    return EXCHANGE_CONFIRM

async def exchange_confirm_bulk_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.replace("exchange_confirm_bulk_", "")
    card_id, amount = data.rsplit("_", 1)
    amount = int(amount)
    user_id = query.from_user.id
    user = pb.get_user_by_telegram_id(user_id)
    user_cards = pb.get_user_inventory(user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    card = user_card.get("expand", {}).get("card_id", {}) if user_card else {}
    rarity = card.get("rarity", 1)
    reward_map = {1: 1, 2: 3, 3: 10, 4: 30, 5: 100, 6: 250}
    reward = reward_map.get(rarity, 1)
    if count <= 1 or amount < 1 or amount > (count-1):
        try:
            if query.message.photo:
                await query.message.edit_caption("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
            else:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        except Exception:
            await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return ConversationHandler.END
    url = f"{pb.base_url}/collections/user_cards/records/{user_card['id']}"
    httpx.patch(url, headers=pb.headers, json={"count": count-amount})
    await asyncio.sleep(0.3)
    pb.update_user_stars_and_pity(user["id"], user.get("stars", 0) + reward*amount, user.get("pity_legendary", 0), user.get("pity_void", 0))
    text = f"‚ôªÔ∏è –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{reward*amount} –∑–≤—ë–∑–¥</b>. –û—Å—Ç–∞–ª–æ—Å—å: {count-amount}"
    try:
        if query.message.photo:
            await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"showcard_refresh_{card_id}")]]))
        else:
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"showcard_refresh_{card_id}")]]))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"showcard_refresh_{card_id}")]]))
    context.user_data.pop("exchange", None)
    return ConversationHandler.END

# --- –ù–æ–≤—ã–π callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ ---
async def showcard_refresh_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ –∂–µ, —á—Ç–æ showcard_callback, –Ω–æ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ—Ç —Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("showcard_refresh_", "")
    url = f"{pb.base_url}/collections/cards/records/{card_id}"
    resp = requests.get(url, headers=pb.headers)
    if resp.status_code != 200:
        await query.edit_message_text("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    card = resp.json()
    user_id = query.from_user.id
    user_cards = pb.get_user_inventory(pb.get_user_by_telegram_id(user_id)["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    can_auction = count > 0
    text = (
        f"<b>{card.get('name')}</b>\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{card.get('group')}</b>\n"
        f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-')}</b>\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card.get('rarity')}‚òÖ</b>\n"
        f"–í –Ω–∞–ª–∏—á–∏–∏: <b>{count}</b>"
    )
    keyboard = []
    if can_auction:
        keyboard.append([InlineKeyboardButton("üí∏ –í—ã–ª–æ–∂–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω", callback_data=f"auction_{card_id}")])
    if count > 1:
        keyboard.append([InlineKeyboardButton(f"‚ôªÔ∏è –°–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç ({count-1})", callback_data=f"exchange_{card_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory")])
    overlayed_path = apply_overlay(card.get("image_url"), card.get("rarity"))
    if overlayed_path:
        with open(overlayed_path, "rb") as img_file:
            await query.message.reply_photo(img_file, caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        os.unlink(overlayed_path)
    elif card.get("image_url"):
        await query.message.reply_photo(card.get("image_url"), caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("pull", pull))
    app.add_handler(CommandHandler("pull10", pull10))
    app.add_handler(CommandHandler("inventory", inventory))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("pity", pity))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("settings", settings))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("auctions", auctions))
    addcard_conv = ConversationHandler(
        entry_points=[CommandHandler("addcard", addcard_start)],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_name)],
            ADD_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_group)],
            ADD_ALBUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_album)],
            ADD_RARITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_rarity)],
            ADD_IMAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_image)],
            ADD_CONFIRM: [CallbackQueryHandler(addcard_confirm, pattern="^addcard_(yes|no)$")],
        },
        fallbacks=[CommandHandler("cancel", addcard_cancel)],
    )
    auction_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(auction_start_callback, pattern="^auction_")],
        states={
            AUCTION_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, auction_price)],
            AUCTION_DURATION: [CallbackQueryHandler(auction_duration, pattern="^auction_dur_\\d+")],
            AUCTION_CONFIRM: [CallbackQueryHandler(auction_confirm, pattern="^auction_(yes|no)$")],
        },
        fallbacks=[],
    )
    promo_conv = ConversationHandler(
        entry_points=[CommandHandler("promo", promo_start)],
        states={
            PROMO_ENTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, promo_enter)],
        },
        fallbacks=[CommandHandler("cancel", promo_cancel)],
    )
    addpromo_conv = ConversationHandler(
        entry_points=[CommandHandler("addpromo", addpromo_start)],
        states={
            ADD_PROMO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, addpromo_code)],
            ADD_PROMO_REWARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, addpromo_reward)],
            ADD_PROMO_LIMIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, addpromo_limit)],
        },
        fallbacks=[CommandHandler("cancel", addpromo_cancel)],
    )
    exchange_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(exchange_duplicate_callback, pattern="^exchange_")],
        states={
            EXCHANGE_SELECT: [CallbackQueryHandler(exchange_select_callback, pattern="^exchange_select_.*")],
            EXCHANGE_CONFIRM: [CallbackQueryHandler(exchange_confirm_bulk_callback, pattern="^exchange_confirm_bulk_.*")],
        },
        fallbacks=[CallbackQueryHandler(showcard_callback, pattern="^showcard_")],
    )
    # --- –°–Ω–∞—á–∞–ª–∞ inventory_group –∏ album, –ø–æ—Ç–æ–º menu_callback, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ –±—ã–ª–∏ ---
    app.add_handler(addcard_conv)
    app.add_handler(auction_conv)
    app.add_handler(promo_conv)
    app.add_handler(addpromo_conv)
    app.add_handler(exchange_conv)
    app.add_handler(CallbackQueryHandler(inventory_group_callback, pattern="^invgroup_"))
    app.add_handler(CallbackQueryHandler(inventory_album_callback, pattern="^invalbum_"))
    app.add_handler(CallbackQueryHandler(showcard_callback, pattern="^showcard_"))
    app.add_handler(CallbackQueryHandler(buyauction_callback, pattern="^buyauction_"))
    app.add_handler(CallbackQueryHandler(showcard_refresh_callback, pattern="^showcard_refresh_"))
    app.add_handler(CallbackQueryHandler(menu_callback))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, group_message_handler))
    app.run_polling()

if __name__ == "__main__":
    main() 