from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from pb_client import PBClient
from config import TELEGRAM_BOT_TOKEN, ADMIN_IDS, TELEGRAM_AUCTION_CHANNEL_ID
import random
import os
import tempfile
import requests
from PIL import Image
from telegram.ext import ConversationHandler, MessageHandler, filters
from collections import defaultdict
import httpx
import asyncio
from telegram.constants import ParseMode, ChatType
import uuid

pb = PBClient()

# –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (—Å—É–º–º–∞ = 100)
RARITY_CHANCES = [
    (1, 40),   # 1 –∑–≤–µ–∑–¥–∞ - 29%
    (2, 32),   # 2 –∑–≤–µ–∑–¥—ã - 30%
    (3, 20),   # 3 –∑–≤–µ–∑–¥—ã - 25%
    (4, 5),   # 4 –∑–≤–µ–∑–¥—ã - 12%
    (5, 2),    # 5 –∑–≤—ë–∑–¥ - 3%
    (6, 0.5),    # 6 –∑–≤—ë–∑–¥ - 0.5%
]
RARITY_WEIGHTS = [chance for _, chance in RARITY_CHANCES]
RARITY_VALUES = [rarity for rarity, _ in RARITY_CHANCES]

PULL_COST = 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤ –∑–≤—ë–∑–¥–∞—Ö 
PULL10_COST = 90  # –°—Ç–æ–∏–º–æ—Å—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫ (—Å–∫–∏–¥–∫–∞)

ADD_NAME, ADD_GROUP, ADD_ALBUM, ADD_RARITY, ADD_IMAGE, ADD_CONFIRM = range(6)
AUCTION_PRICE, AUCTION_DURATION, AUCTION_CONFIRM = range(10, 13)
auction_data = {}

addcard_data = {}

message_counters = defaultdict(int)

PROMO_ENTER, = range(20, 21)

EXCHANGE_SELECT, EXCHANGE_CONFIRM = range(40, 42)

BANNER_GROUP, BANNER_ALBUM, BANNER_CONFIRM = range(50, 53)

TRADE_SELECT_USER, TRADE_SELECT_OTHER_CARD, TRADE_CONFIRM = range(60, 63)
trade_data = {}

TRADE_PAGE_SIZE = 10

async def promo_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = get_reply_target(update)
    await target.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    return PROMO_ENTER

async def promo_enter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    promo = pb.get_promo(code)
    if not promo:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    if not promo.get("is_active", True):
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return ConversationHandler.END
    usage_limit = promo.get("usage_limit", 1)
    used_by = promo.get("used_by", [])
    if len(used_by) >= usage_limit:
        await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
        return ConversationHandler.END
    if pb_user["id"] in used_by:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        return ConversationHandler.END
    # –í—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É
    reward = promo.get("reward", 0)
    pb.update_user_stars_and_pity(pb_user["id"], pb_user.get("stars", 0) + reward, pb_user.get("pity_legendary", 0), pb_user.get("pity_void", 0))
    pb.use_promo(promo["id"], pb_user["id"])
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥.")
    return ConversationHandler.END

async def promo_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
ADD_PROMO_CODE, ADD_PROMO_REWARD, ADD_PROMO_LIMIT = range(30, 33)
addpromo_data = {}

async def addpromo_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    addpromo_data[user_id] = {}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã):")
    return ADD_PROMO_CODE

async def addpromo_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addpromo_data[user_id]["code"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (—Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥):")
    return ADD_PROMO_REWARD

async def addpromo_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        reward = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return ADD_PROMO_REWARD
    addpromo_data[user_id]["reward"] = reward
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—á–∏—Å–ª–æ, 0 = –±–µ–∑–ª–∏–º–∏—Ç):")
    return ADD_PROMO_LIMIT

async def addpromo_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        limit = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return ADD_PROMO_LIMIT
    addpromo_data[user_id]["usage_limit"] = limit if limit > 0 else 1000000
    data = addpromo_data[user_id]
    pb.add_promo(data["code"], data["reward"], data["usage_limit"], True)
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {data['code']} –¥–æ–±–∞–≤–ª–µ–Ω! –ù–∞–≥—Ä–∞–¥–∞: {data['reward']} –∑–≤—ë–∑–¥, –ª–∏–º–∏—Ç: {data['usage_limit']}")
    addpromo_data.pop(user_id, None)
    return ConversationHandler.END

async def addpromo_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addpromo_data.pop(user_id, None)
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def drop100(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /drop100 <user_id>")
        return
    target_tg_id = int(context.args[0])
    pb_user = pb.get_user_by_telegram_id(target_tg_id)
    if not pb_user:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {target_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    all_cards = pb.get_all_cards()
    if not all_cards:
        await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return
    import random
    dropped = random.choices(all_cards, k=100)
    for card in dropped:
        pb.add_card_to_user(pb_user["id"], card["id"])
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ 100 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {pb_user.get('name', target_tg_id)} (ID: {target_tg_id})!")

def get_reply_target(update, prefer_edit=False):
    if prefer_edit and hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
        return update.callback_query.message
    if hasattr(update, 'message') and update.message:
        return update.message
    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
        return update.callback_query.message
    return None

def back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    if args and args[0].startswith("bonus_"):
        from config import DAILY_BONUS_REWARD
        try:
            _, tg_id, token = args[0].split("_", 2)
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –±–æ–Ω—É—Å-—Å—Å—ã–ª–∫–∞.")
            return
        pb_user = pb.get_user_by_telegram_id(tg_id)
        if not pb_user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        ok = pb.check_and_consume_daily_bonus(pb_user["id"], token)
        if ok:
            new_stars = pb_user.get("stars", 0) + DAILY_BONUS_REWARD
            pb.update_user_stars_and_pity(pb_user["id"], new_stars, pb_user.get("pity_legendary", 0), pb_user.get("pity_void", 0))
            await update.message.reply_text(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {DAILY_BONUS_REWARD} –∑–≤—ë–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!")
        else:
            await update.message.reply_text("–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        return
    target = get_reply_target(update)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        pb.create_user(user.id, user.full_name)
        if target:
            await target.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.full_name}</b>!\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.", parse_mode="HTML")
    else:
        if target:
            await target.reply_text(f"‚ú® –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{user.full_name}</b>!", parse_mode="HTML")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = get_reply_target(update)
    if target:
        await target.reply_text(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<b>/menu</b> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "<b>/profile</b> ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "<b>/pull</b> ‚Äî –≥–∞—á–∞ (1 –ø–æ–ø—ã—Ç–∫–∞)\n"
            "<b>/pull10</b> ‚Äî –≥–∞—á–∞ (10 –ø–æ–ø—ã—Ç–æ–∫)\n"
            "<b>/inventory</b> ‚Äî –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
            "<b>/daily</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–∫–∞\n"
            "<b>/history</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫\n"
            "<b>/pity</b> ‚Äî pity-—Å—á—ë—Ç—á–∏–∫–∏\n"
            "<b>/leaderboard</b> ‚Äî —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
            "<b>/settings</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "<b>/help</b> ‚Äî –ø–æ–º–æ—â—å",
            parse_mode="HTML"
        )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    rank = pb.get_rank(pb_user.get('level', 1))
    group, album = pb.get_active_banner(pb_user)
    if group and album:
        banner_str = f"<b>–ë–∞–Ω–Ω–µ—Ä:</b> <i>{group} ‚Äî {album}</i>"
    else:
        banner_str = "<b>–ë–∞–Ω–Ω–µ—Ä:</b> <i>–û–±—â–∏–π (–≤—Å–µ –∫–∞—Ä—Ç—ã)</i>"
    text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"<b>–ò–º—è:</b> {pb_user.get('name', '')}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {pb_user.get('level', 1)} <i>({rank})</i>\n"
        f"<b>–û–ø—ã—Ç:</b> {pb_user.get('exp', 0)} / {pb.exp_to_next_level(pb_user.get('level', 1))}\n"
        f"<b>‚≠ê –ó–≤—ë–∑–¥—ã:</b> {pb_user.get('stars', 0)}\n"
        f"<b>üéØ Pity Legendary:</b> {pb_user.get('pity_legendary', 0)} / 80\n"
        f"<b>üï≥Ô∏è Pity Void:</b> {pb_user.get('pity_void', 0)} / 165\n"
        f"{banner_str}"
    )
    if target:
        if prefer_edit:
            await target.edit_text(text, parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text(text, parse_mode="HTML", reply_markup=back_keyboard())

# --- –ì–∞—á–∞ –ª–æ–≥–∏–∫–∞ ---
def choose_rarity(pity_legendary, pity_void):
    # Pity: 80 - –≥–∞—Ä–∞–Ω—Ç 5*, 165 - –≥–∞—Ä–∞–Ω—Ç 6*
    if pity_void >= 165:
        return 6
    if pity_legendary >= 80:
        return 5
    return random.choices(RARITY_VALUES, weights=RARITY_WEIGHTS, k=1)[0]

def apply_overlay(card_image_url, rarity):
    if rarity not in (3, 4, 5, 6):
        return None  # –≠—Ñ—Ñ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è 3‚òÖ –∏ –≤—ã—à–µ
    overlay_path = os.path.join(os.path.dirname(__file__), "overlays", f"overlay_{rarity}.png")
    if not os.path.exists(overlay_path):
        return None  # –ù–µ—Ç –æ–≤–µ—Ä–ª–µ—è –¥–ª—è —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_card:
        resp = requests.get(card_image_url)
        temp_card.write(resp.content)
        temp_card_path = temp_card.name
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    card_img = Image.open(temp_card_path).convert("RGBA")
    overlay_img = Image.open(overlay_path).convert("RGBA")
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
    overlay_img = overlay_img.resize(card_img.size, Image.Resampling.LANCZOS)
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    combined = Image.alpha_composite(card_img, overlay_img)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    out_path = tempfile.mktemp(suffix=".png")
    combined.save(out_path, format="PNG")
    os.unlink(temp_card_path)
    return out_path

async def pull_once(user, pb_user, update, pull_type="single"):
    target = get_reply_target(update)
    pity_legendary = pb_user.get("pity_legendary", 0)
    pity_void = pb_user.get("pity_void", 0)
    stars = pb_user.get("stars", 0)
    user_id = pb_user["id"]
    level = pb_user.get("level", 1)
    exp = pb_user.get("exp", 0)

    if stars < PULL_COST:
        if target:
            await target.reply_text("<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏!</b>", parse_mode="HTML")
        return

    rarity = choose_rarity(pity_legendary, pity_void)
    # --- –ë–∞–Ω–Ω–µ—Ä ---
    group, album = pb.get_active_banner(pb_user)
    if group and album:
        all_cards = pb.get_cards_by_group_album(group, album)
        cards_of_rarity = [c for c in all_cards if c.get("rarity") == rarity]
        card = random.choice(cards_of_rarity) if cards_of_rarity else None
    else:
        card = pb.get_random_card_by_rarity(rarity)
    if not card:
        if target:
            await target.reply_text(f"–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é {rarity}‚òÖ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–∞–Ω–Ω–µ—Ä–µ!", parse_mode="HTML")
        return

    # Pity-—Å—á—ë—Ç—á–∏–∫–∏
    if rarity == 6:
        pity_void = 0
        pity_legendary += 1
    elif rarity == 5:
        pity_legendary = 0
        pity_void += 1
    else:
        pity_legendary += 1
        pity_void += 1

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
    stars -= PULL_COST
    pb.update_user_stars_and_pity(user_id, stars, pity_legendary, pity_void)
    pb.add_card_to_user(user_id, card["id"])
    pb.add_pull_history(user_id, card["id"], pull_type)

    # –û–ø—ã—Ç –∑–∞ –∫–∞—Ä—Ç–æ—á–∫—É
    base_exp = PBClient.RARITY_EXP.get(card["rarity"], 1)
    is_first = pb.is_first_card(user_id, card["id"])
    total_exp = base_exp + (base_exp // 2 if is_first else 0)
    updated_user, levelup = pb.add_exp_and_check_levelup(user_id, level, exp, total_exp)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    banner_text = f"<b>–ë–∞–Ω–Ω–µ—Ä:</b> <i>{group} ‚Äî {album}</i>\n" if group and album else ""
    text = (
        f"{banner_text}<b>–í—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞:</b> <b>{card['name']}</b> (<i>{card['group']}</i>)\n"
        f"<b>–†–µ–¥–∫–æ—Å—Ç—å:</b> <b>{card['rarity']}‚òÖ</b>\n<b>+{base_exp} –æ–ø—ã—Ç–∞</b>"
    )
    if is_first:
        text += " <i>(–ø–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ, –±–æ–Ω—É—Å +50%)</i>"
    if levelup:
        rank = pb.get_rank(updated_user.get('level', 1))
        text += f"\n<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω: {updated_user.get('level', 1)} ({rank})</b>"
    if card.get("image_url"):
        overlayed_path = apply_overlay(card["image_url"], card["rarity"])
        if overlayed_path:
            with open(overlayed_path, "rb") as img_file:
                await target.reply_photo(img_file, caption=text, parse_mode="HTML")
            os.unlink(overlayed_path)
        else:
            await target.reply_photo(card["image_url"], caption=text, parse_mode="HTML")
    else:
        if target:
            await target.reply_text(text, parse_mode="HTML")

async def pull(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await pull_once(update.effective_user, pb.get_user_by_telegram_id(update.effective_user.id), update, pull_type="single")

async def pull10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await pull10_impl(update.effective_user, pb.get_user_by_telegram_id(update.effective_user.id), update)

async def pull10_impl(user, pb_user, update):
    target = get_reply_target(update)
    stars = pb_user.get("stars", 0)
    if stars < PULL10_COST:
        if target:
            await target.reply_text("<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è 10 –ø–æ–ø—ã—Ç–æ–∫!</b>", parse_mode="HTML")
        return
    user_id = pb_user["id"]
    pity_legendary = pb_user.get("pity_legendary", 0)
    pity_void = pb_user.get("pity_void", 0)
    level = pb_user.get("level", 1)
    exp = pb_user.get("exp", 0)
    group, album = pb.get_active_banner(pb_user)
    results = []
    media = []
    captions = []
    total_exp = 0
    rolls = 0
    max_rolls = 200  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
    banner_text = f"<b>–ë–∞–Ω–Ω–µ—Ä:</b> <i>{group} ‚Äî {album}</i>\n" if group and album else ""
    
    # –ö—ç—à–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –±–∞–Ω–Ω–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑
    banner_cards = None
    if group and album:
        banner_cards = pb.get_cards_by_group_album(group, album)
    
    while len(results) < 10 and rolls < max_rolls:
        rarity = choose_rarity(pity_legendary, pity_void)
        if group and album and banner_cards:
            cards_of_rarity = [c for c in banner_cards if c.get("rarity") == rarity]
            if not cards_of_rarity:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏, –±–µ—Ä–µ–º –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                card = random.choice(banner_cards)
            else:
                card = random.choice(cards_of_rarity)
        else:
            card = pb.get_random_card_by_rarity(rarity)
            if not card:
                rolls += 1
                continue
        # Pity-—Å—á—ë—Ç—á–∏–∫–∏
        if rarity == 6:
            pity_void = 0
            pity_legendary += 1
        elif rarity == 5:
            pity_legendary = 0
            pity_void += 1
        else:
            pity_legendary += 1
            pity_void += 1
        pb.add_card_to_user(user_id, card["id"])
        pb.add_pull_history(user_id, card["id"], "multi")
        base_exp = PBClient.RARITY_EXP.get(card["rarity"], 1)
        is_first = pb.is_first_card(user_id, card["id"])
        exp_gain = base_exp + (base_exp // 2 if is_first else 0)
        total_exp += exp_gain
        caption = (
            f"{banner_text}<b>{card['name']}</b> (<i>{card['group']}</i>)\n"
            f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-') if card.get('album') else '-'}</b>\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card['rarity']}‚òÖ</b> <b>+{exp_gain} –æ–ø—ã—Ç–∞</b>"
        )
        if is_first:
            caption += " <i>(–ø–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ)</i>"
        overlayed_path = apply_overlay(card.get("image_url"), card.get("rarity"))
        if overlayed_path:
            media.append(InputMediaPhoto(open(overlayed_path, "rb"), caption=caption, parse_mode="HTML"))
            captions.append(overlayed_path)
        elif card.get("image_url"):
            media.append(InputMediaPhoto(card["image_url"], caption=caption, parse_mode="HTML"))
            captions.append(None)
        else:
            results.append(f"{len(results)+1}. {card['name']} ‚Äî –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        results.append(card)
        rolls += 1
    if len(results) < 10:
        await target.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 10 –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ {max_rolls} –ø–æ–ø—ã—Ç–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –±–∞–Ω–Ω–µ—Ä–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π.", parse_mode="HTML")
        return
    pb.update_user_stars_and_pity(user_id, stars - PULL10_COST, pity_legendary, pity_void)
    updated_user, levelup = pb.add_exp_and_check_levelup(user_id, level, exp, total_exp)
    if media:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç –º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        if len(media) > 5:
            summary = f"{banner_text}<b>üéâ –ü–æ–ª—É—á–µ–Ω–æ {len(media)} –∫–∞—Ä—Ç–æ—á–µ–∫!</b>\n\n"
            rarity_summary = {}
            for m in media:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∏–∑ caption
                caption = m.caption
                if "–†–µ–¥–∫–æ—Å—Ç—å: " in caption:
                    rarity_line = caption.split("–†–µ–¥–∫–æ—Å—Ç—å: ")[1].split(" ")[0]
                    # –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –∏ —Å–∏–º–≤–æ–ª—ã
                    rarity_clean = rarity_line.replace("‚òÖ", "").replace("<b>", "").replace("</b>", "")
                    rarity = int(rarity_clean)
                    rarity_summary[rarity] = rarity_summary.get(rarity, 0) + 1
            
            for rarity in sorted(rarity_summary.keys()):
                summary += f"<b>{rarity}‚òÖ</b>: {rarity_summary[rarity]} –∫–∞—Ä—Ç\n"
            
            await target.reply_text(summary, parse_mode="HTML")
        else:
            try:
                await target.reply_media_group(media)
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                for i, m in enumerate(media):
                    try:
                        await target.reply_photo(m.media, caption=m.caption, parse_mode="HTML")
                        if i < len(media) - 1:  # –ù–µ –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã
                            await asyncio.sleep(1.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    except Exception as e:
                        print(f"DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã {i+1}: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                        await target.reply_text(m.caption, parse_mode="HTML")
        for path in captions:
            if path:
                try:
                    os.unlink(path)
                except Exception:
                    pass
    if levelup:
        rank = pb.get_rank(updated_user.get('level', 1))
        await target.reply_text(f"\n<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω: {updated_user.get('level', 1)} ({rank})</b>", parse_mode="HTML")

# --- –ù–æ–≤—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –∞–ª—å–±–æ–º–∞–º ---
async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                try:
                    await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
                except Exception:
                    await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    cards = pb.get_user_inventory(user_id)
    if not cards:
        if target:
            if prefer_edit:
                try:
                    await target.edit_text("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!", parse_mode="HTML", reply_markup=back_keyboard())
                except Exception:
                    await target.reply_text("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!", parse_mode="HTML", reply_markup=back_keyboard())
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    group_set = set()
    for c in cards:
        card = c.get("expand", {}).get("card_id", {})
        if not card:
            continue
        group = card.get("group", "-")
        group_set.add(group)
    keyboard = []
    for group in sorted(group_set):
        keyboard.append([InlineKeyboardButton(f"{group}", callback_data=f"invgroup_{group}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")])
    text = "<b>üé¥ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    if target:
        if prefer_edit:
            try:
                await target.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
            except Exception:
                await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
        else:
            await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

# --- Callback: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, –∑–∞—Ç–µ–º –∞–ª—å–±–æ–º–∞ ---
async def inventory_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    group = query.data.replace("invgroup_", "")
    user_id = query.from_user.id
    pb_user = pb.get_user_by_telegram_id(user_id)
    cards = pb.get_user_inventory(pb_user["id"])
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–ª—å–±–æ–º–∞–º –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    album_set = set()
    for c in cards:
        card = c.get("expand", {}).get("card_id", {})
        if not card:
            continue
        if card.get("group", "-").strip().lower() == group.strip().lower():
            album_set.add(card.get("album", "-"))
    keyboard = []
    for album in sorted(album_set):
        keyboard.append([InlineKeyboardButton(f"{album}", callback_data=f"invalbum_{group}__{album}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory")])
    text = f"<b>–ì—Ä—É–ø–ø–∞:</b> <b>{group}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º:"
    try:
        if query.message:
            if query.message.photo:
                await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# --- Callback: –≤—ã–±–æ—Ä –∞–ª—å–±–æ–º–∞, –∑–∞—Ç–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ ---
async def inventory_album_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ACHIEVEMENT_REWARDS
    query = update.callback_query
    if query.data == "none":
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏!", show_alert=True)
        return
    await query.answer()
    data = query.data.replace("invalbum_", "")
    group, album = data.split("__", 1)
    user_id = query.from_user.id
    pb_user = pb.get_user_by_telegram_id(user_id)
    user_cards = pb.get_user_inventory(pb_user["id"])
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    all_cards = pb.get_cards_by_group_album(group, album)
    # –°–æ–±–∏—Ä–∞–µ–º user_card_id -> count
    user_card_map = {c.get("expand", {}).get("card_id", {}).get("id"): c.get("count", 0) for c in user_cards if c.get("expand", {}).get("card_id", {}).get("group", "-").strip().lower() == group.strip().lower() and c.get("expand", {}).get("card_id", {}).get("album", "-").strip().lower() == album.strip().lower()}
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–¥–∫–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
    all_cards.sort(key=lambda c: (-c.get("rarity", 1), c.get("name", "")))
    have = 0
    card_buttons = []
    for card in all_cards:
        cid = card.get("id")
        count = user_card_map.get(cid, 0)
        if count > 0:
            btn_text = f"‚úÖ {card.get('name', '???')} ‚Äî {card.get('rarity', '?')}‚òÖ √ó{count}"
            card_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"showcard_{cid}")])
            have += 1
        else:
            btn_text = f"‚ùå {card.get('name', '???')} ‚Äî {card.get('rarity', '?')}‚òÖ"
            card_buttons.append([InlineKeyboardButton(btn_text, callback_data="none")])
    card_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"invgroup_{group}")])
    percent = int(have / max(1, len(all_cards)) * 100)
    text = f"<b>–ì—Ä—É–ø–ø–∞:</b> <b>{group}</b>\n<b>–ê–ª—å–±–æ–º:</b> <b>{album}</b>\n\n<b>–°–æ–±—Ä–∞–Ω–æ:</b> <b>{have} / {len(all_cards)}</b> (<b>{percent}%</b>)\n\n<code>‚úÖ ‚Äî –µ—Å—Ç—å  ‚ùå ‚Äî –Ω–µ—Ç</code>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É:"
    # --- –ê—á–∏–≤–∫–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
    ach_level = 0
    if percent >= 100:
        ach_level = 4
    elif percent >= 75:
        ach_level = 3
    elif percent >= 50:
        ach_level = 2
    elif percent >= 25:
        ach_level = 1
    if ach_level > 0:
        ach = pb.get_collection_achievement(pb_user["id"], group, album)
        prev_level = ach["level"] if ach else 0
        if ach_level > prev_level:
            # –í—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É
            reward = ACHIEVEMENT_REWARDS.get(ach_level, {"exp": 0, "stars": 0})
            pb.set_collection_achievement(pb_user["id"], group, album, ach_level)
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –∏ –∑–≤—ë–∑–¥—ã
            new_exp = pb_user.get("exp", 0) + reward["exp"]
            new_stars = pb_user.get("stars", 0) + reward["stars"]
            pb.update_user_stars_and_pity(pb_user["id"], new_stars, pb_user.get("pity_legendary", 0), pb_user.get("pity_void", 0))
            pb.add_exp_and_check_levelup(pb_user["id"], pb_user.get("level", 1), pb_user.get("exp", 0), reward["exp"])
            try:
                await query.message.reply_text(f"üèÜ <b>–ê—á–∏–≤–∫–∞!</b> –ó–∞ {ach_level*25}% –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞–ª—å–±–æ–º–∞ <b>{album}</b> –≤—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{reward['exp']} –æ–ø—ã—Ç–∞</b> –∏ <b>{reward['stars']} –∑–≤—ë–∑–¥</b>!", parse_mode="HTML")
            except Exception:
                pass
    try:
        if query.message:
            if query.message.photo:
                await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))
            else:
                await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))
        else:
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(card_buttons))

async def showcard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("showcard_", "")
    url = f"{pb.base_url}/collections/cards/records/{card_id}"
    resp = requests.get(url, headers=pb.headers)
    if resp.status_code != 200:
        try:
            if query.message and query.message.photo:
                await query.message.edit_caption("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await query.edit_message_text("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception:
            await query.message.reply_text("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    card = resp.json()
    user_id = query.from_user.id
    user_cards = pb.get_user_inventory(pb.get_user_by_telegram_id(user_id)["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    can_auction = count > 0
    text = (
        f"<b>{card.get('name')}</b>\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{card.get('group')}</b>\n"
        f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-')}</b>\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card.get('rarity')}‚òÖ</b>\n"
        f"–í –Ω–∞–ª–∏—á–∏–∏: <b>{count}</b>"
    )
    keyboard = []
    if can_auction:
        keyboard.append([InlineKeyboardButton("üí∏ –í—ã–ª–æ–∂–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω", callback_data=f"auction_{card_id}")])
    # –ö–Ω–æ–ø–∫–∞ —Å–¥–∞—á–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if count > 1:
        keyboard.append([InlineKeyboardButton(f"‚ôªÔ∏è –°–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç ({count-1})", callback_data=f"exchange_{card_id}")])
    # –ö–Ω–æ–ø–∫–∞ –æ–±–º–µ–Ω–∞
    if count > 0:
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–º–µ–Ω—è—Ç—å—Å—è", callback_data=f"trade_start_{card_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory")])
    overlayed_path = apply_overlay(card.get("image_url"), card.get("rarity"))
    if overlayed_path:
        with open(overlayed_path, "rb") as img_file:
            await query.message.reply_photo(img_file, caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        os.unlink(overlayed_path)
    elif card.get("image_url"):
        await query.message.reply_photo(card.get("image_url"), caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        try:
            if query.message and query.message.photo:
                await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception:
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

async def auction_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("auction_", "")
    user_id = query.from_user.id
    auction_data[user_id] = {"card_id": card_id}
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö:")
    return AUCTION_PRICE

async def auction_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        price = int(update.message.text.strip())
        if price < 1:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return AUCTION_PRICE
    auction_data[user_id]["price"] = price
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞
    keyboard = [
        [InlineKeyboardButton("12 —á", callback_data="auction_dur_12"),
         InlineKeyboardButton("24 —á", callback_data="auction_dur_24"),
         InlineKeyboardButton("48 —á", callback_data="auction_dur_48")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AUCTION_DURATION

async def auction_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    if query.data.startswith("auction_dur_"):
        hours = int(query.data.split("_")[-1])
        auction_data[user_id]["duration"] = hours
        data = auction_data[user_id]
        text = f"–í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω –∑–∞ {data['price']} –∑–≤—ë–∑–¥ –Ω–∞ {hours} —á?"
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞", callback_data="auction_yes"), InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="auction_no")]]
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return AUCTION_CONFIRM
    await query.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞.")
    return ConversationHandler.END

async def auction_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    if query.data == "auction_no":
        await query.edit_message_text("‚ùå –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        auction_data.pop(user_id, None)
        return ConversationHandler.END
    data = auction_data[user_id]
    pb_user = pb.get_user_by_telegram_id(user_id)
    # –£–º–µ–Ω—å—à–∞–µ–º count –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_cards = pb.get_user_inventory(pb_user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == data["card_id"] or (c.get("expand", {}).get("card_id", {}).get("id") == data["card_id"])), None)
    if user_card and user_card.get("count", 0) > 0:
        url = f"{pb.base_url}/collections/user_cards/records/{user_card['id']}"
        new_count = user_card.get("count", 1) - 1
        httpx.patch(url, headers=pb.headers, json={"count": new_count})
    pb.create_auction(data["card_id"], pb_user["id"], data["price"], data["duration"])
    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª ---
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    url = f"{pb.base_url}/collections/cards/records/{data['card_id']}"
    resp = requests.get(url, headers=pb.headers)
    card = resp.json() if resp.status_code == 200 else {}
    overlayed_path = apply_overlay(card.get("image_url"), card.get("rarity"))
    seller_name = pb_user.get("name", "?")
    text = (
        f"<b>üõí –ù–æ–≤—ã–π –ª–æ—Ç –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ!</b>\n"
        f"<b>{card.get('name', '???')}</b>\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{card.get('group', '-')}</b>\n"
        f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-')}</b>\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card.get('rarity', '?')}‚òÖ</b>\n"
        f"–¶–µ–Ω–∞: <b>{data['price']}‚≠ê</b>\n"
        f"–°—Ä–æ–∫: <b>{data['duration']} —á.</b>\n"
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{seller_name}</b>"
    )
    try:
        if overlayed_path:
            with open(overlayed_path, "rb") as img_file:
                await context.bot.send_photo(
                    chat_id=TELEGRAM_AUCTION_CHANNEL_ID,
                    photo=img_file,
                    caption=text,
                    parse_mode="HTML"
                )
            os.unlink(overlayed_path)
        elif card.get("image_url"):
            await context.bot.send_photo(
                chat_id=TELEGRAM_AUCTION_CHANNEL_ID,
                photo=card.get("image_url"),
                caption=text,
                parse_mode="HTML"
            )
        else:
            await context.bot.send_message(
                chat_id=TELEGRAM_AUCTION_CHANNEL_ID,
                text=text,
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"[AUCTION CHANNEL ERROR] {e}")
    await query.edit_message_text("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω!")
    auction_data.pop(user_id, None)
    return ConversationHandler.END

async def auctions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    auctions = pb.get_active_auctions()
    if not auctions:
        keyboard = [[InlineKeyboardButton("üé¥ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")]]
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω —á–µ—Ä–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"
        if prefer_edit:
            await target.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    keyboard = []
    for lot in auctions:
        card = lot.get("expand", {}).get("card_id", {})
        seller = lot.get("expand", {}).get("seller_id", {})
        btn_text = f"{card.get('name', '???')} ({card.get('group', '-')}) ‚Äî {card.get('rarity', '?')}‚òÖ –∑–∞ {lot.get('price')}‚≠ê –æ—Ç {seller.get('name', '-')[:12]}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"buyauction_{lot['id']}")])
    text = "<b>–ê—É–∫—Ü–∏–æ–Ω:</b>"
    if prefer_edit:
        await target.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

async def buyauction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lot_id = query.data.replace("buyauction_", "")
    lot = pb.get_auction(lot_id)
    card = lot.get("expand", {}).get("card_id", {})
    price = lot.get("price")
    buyer_id = query.from_user.id
    pb_buyer = pb.get_user_by_telegram_id(buyer_id)
    if pb_buyer.get("stars", 0) < price:
        await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!")
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    pb.update_user_stars_and_pity(pb_buyer["id"], pb_buyer["stars"] - price, pb_buyer.get("pity_legendary", 0), pb_buyer.get("pity_void", 0))
    seller = lot.get("expand", {}).get("seller_id", {})
    if seller:
        pb_seller = pb.get_user_by_telegram_id(seller.get("telegram_id"))
        if pb_seller:
            pb.update_user_stars_and_pity(pb_seller["id"], pb_seller.get("stars", 0) + price, pb_seller.get("pity_legendary", 0), pb_seller.get("pity_void", 0))
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
            seller_tg_id = seller.get("telegram_id")
            if seller_tg_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(seller_tg_id),
                        text=f"üí∏ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ <b>{card.get('name')}</b> –±—ã–ª–∞ –∫—É–ø–ª–µ–Ω–∞ –∑–∞ <b>{price} –∑–≤—ë–∑–¥</b>!",
                        parse_mode="HTML"
                    )
                except Exception:
                    pass
    pb.add_card_to_user(pb_buyer["id"], card["id"])
    pb.finish_auction(lot_id, status="sold", winner_id=pb_buyer["id"])
    await query.edit_message_text(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ö–∞—Ä—Ç–æ—á–∫–∞ {card.get('name')} —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞.")

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    available, last_dt = pb.check_daily_available(pb_user)
    if not available:
        if target:
            if prefer_edit:
                await target.edit_text("<b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.</b>", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("<b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.</b>", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    stars = pb_user.get("stars", 0)
    updated_user, reward = pb.give_daily_reward(user_id, stars)
    if target:
        if prefer_edit:
            await target.edit_text(f"<b>üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!</b>\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ ‚ú®", parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text(f"<b>üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!</b>\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ ‚ú®", parse_mode="HTML", reply_markup=back_keyboard())

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    pulls = pb.get_pull_history(user_id, limit=10)
    if not pulls:
        if target:
            if prefer_edit:
                await target.edit_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    lines = ["<b>üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏:</b>"]
    for p in pulls:
        card = p.get("expand", {}).get("card_id", {})
        if not card:
            continue
        lines.append(f"<b>{card.get('name', '???')}</b> (<i>{card.get('group', '-')}</i>) ‚Äî <b>{card.get('rarity', '?')}‚òÖ</b> [<i>{p.get('pull_type', '')}</i>]")
    if target:
        if prefer_edit:
            await target.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())

async def pity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    user_id = pb_user["id"]
    pity_legendary, pity_void = pb.get_pity_status(user_id)
    if target:
        if prefer_edit:
            await target.edit_text(f"<b>üéØ Pity Legendary:</b> {pity_legendary}/80\n<b>üï≥Ô∏è Pity Void:</b> {pity_void}/165", parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text(f"<b>üéØ Pity Legendary:</b> {pity_legendary}/80\n<b>üï≥Ô∏è Pity Void:</b> {pity_void}/165", parse_mode="HTML", reply_markup=back_keyboard())

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    top = pb.get_leaderboard(limit=10)
    if not top:
        if target:
            if prefer_edit:
                await target.edit_text("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    lines = ["<b>üèÜ –¢–æ–ø –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤:</b>"]
    for i, user in enumerate(top, 1):
        name = user.get("name") or f"User {user.get('telegram_id', '')}" 
        level = user.get("level", 1)
        exp = user.get("exp", 0)
        rank = pb.get_rank(level)
        lines.append(f"{i}. <b>{name}</b> ‚Äî <b>{level}</b> <i>({rank})</i>, –æ–ø—ã—Ç: <b>{exp}</b>")
    if target:
        if prefer_edit:
            await target.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text("\n".join(lines), parse_mode="HTML", reply_markup=back_keyboard())

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    target = get_reply_target(update, prefer_edit=prefer_edit)
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        if target:
            if prefer_edit:
                await target.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
            else:
                await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="HTML", reply_markup=back_keyboard())
        return
    if target:
        if prefer_edit:
            await target.edit_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.</b>", parse_mode="HTML", reply_markup=back_keyboard())
        else:
            await target.reply_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.</b>", parse_mode="HTML", reply_markup=back_keyboard())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefer_edit = hasattr(update, 'callback_query') and update.callback_query is not None
    user = update.effective_user if hasattr(update, 'effective_user') else None
    pb_user = pb.get_user_by_telegram_id(user.id) if user else None
    group, album = pb.get_active_banner(pb_user) if pb_user else (None, None)
    if group and album:
        banner_str = f"<b>–ë–∞–Ω–Ω–µ—Ä:</b> <i>{group} ‚Äî {album}</i>"
    else:
        banner_str = "<b>–ë–∞–Ω–Ω–µ—Ä:</b> <i>–û–±—â–∏–π (–≤—Å–µ –∫–∞—Ä—Ç—ã)</i>"
    keyboard = [
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"), InlineKeyboardButton("üé¥ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton("üé≤ –ì–∞—á–∞ (1)", callback_data="pull"), InlineKeyboardButton("üîü –ì–∞—á–∞ (10)", callback_data="pull10")],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–∫–∞", callback_data="daily"), InlineKeyboardButton("üïì –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("üéØ Pity", callback_data="pity"), InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")],
        [InlineKeyboardButton("üõí –ê—É–∫—Ü–∏–æ–Ω", callback_data="auctions")],
        [InlineKeyboardButton("üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
        [InlineKeyboardButton("üé§ –ë–∞–Ω–Ω–µ—Ä", callback_data="banner")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    target = get_reply_target(update, prefer_edit=prefer_edit)
    menu_text = f"<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n{banner_str}"
    if target:
        if prefer_edit:
            await target.edit_text(menu_text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            await target.reply_text(menu_text, reply_markup=reply_markup, parse_mode="HTML")

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    print(f"[menu_callback] query.data: {query.data}")
    data = query.data
    if data == "menu":
        await menu(update, context)
        return
    if data == "profile":
        await profile(update, context)
    elif data == "inventory":
        await inventory(update, context)
    elif data == "pull":
        await pull(update, context)
    elif data == "pull10":
        await pull10(update, context)
    elif data == "daily":
        await daily(update, context)
    elif data == "history":
        await history(update, context)
    elif data == "pity":
        await pity(update, context)
    elif data == "leaderboard":
        await leaderboard(update, context)
    elif data == "settings":
        await settings(update, context)
    elif data == "auctions":
        await auctions(update, context)
    elif data == "achievements":
        await achievements(update, context)
    elif data == "banner":
        await banner_start(update, context)
    else:
        try:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        except Exception:
            await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def addcard_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    addcard_data[user_id] = {}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏</b>:", parse_mode="HTML")
    return ADD_NAME

async def addcard_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–≥—Ä—É–ø–ø—É</b>:", parse_mode="HTML")
    return ADD_GROUP

async def addcard_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["group"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞</b>:", parse_mode="HTML")
    return ADD_ALBUM

async def addcard_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["album"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>—Ä–µ–¥–∫–æ—Å—Ç—å</b> (1-6):", parse_mode="HTML")
    return ADD_RARITY

async def addcard_rarity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        rarity = int(update.message.text.strip())
        if rarity < 1 or rarity > 6:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6!")
        return ADD_RARITY
    addcard_data[user_id]["rarity"] = rarity
    await update.message.reply_text("–í—Å—Ç–∞–≤—å—Ç–µ <b>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>:", parse_mode="HTML")
    return ADD_IMAGE

async def addcard_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data[user_id]["image_url"] = update.message.text.strip()
    card = addcard_data[user_id]
    text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"–ò–º—è: {card['name']}\n–ì—Ä—É–ø–ø–∞: {card['group']}\n–ê–ª—å–±–æ–º: {card['album']}\n–†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\nURL: {card['image_url']}\n\n–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="addcard_yes"), InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="addcard_no")]
    ]
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    return ADD_CONFIRM

async def addcard_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    if query.data == "addcard_no":
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        addcard_data.pop(user_id, None)
        return ConversationHandler.END
    card = addcard_data[user_id]
    try:
        pb.add_card(card["name"], card["group"], card["album"], card["rarity"], card["image_url"])
        await query.edit_message_text("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!")
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
    addcard_data.pop(user_id, None)
    return ConversationHandler.END

async def addcard_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    addcard_data.pop(user_id, None)
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def group_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in ["group", "supergroup"]:
        return
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    key = (chat_id, user_id)
    message_counters[key] += 1
    if message_counters[key] % 50 == 0:
        pb_user = pb.get_user_by_telegram_id(user_id)
        if pb_user:
            new_stars = pb_user.get("stars", 0) + 25
            pb.update_user_stars_and_pity(pb_user["id"], new_stars, pb_user.get("pity_legendary", 0), pb_user.get("pity_void", 0))
            await update.message.reply_text(f"üéâ @{update.effective_user.username or update.effective_user.first_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 25 –∑–≤—ë–∑–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ!")

# --- –ù–æ–≤—ã–π callback –¥–ª—è –æ–±–º–µ–Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ---
async def exchange_duplicate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("exchange_", "")
    user_id = query.from_user.id
    user = pb.get_user_by_telegram_id(user_id)
    user_cards = pb.get_user_inventory(user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    card = user_card.get("expand", {}).get("card_id", {}) if user_card else {}
    rarity = card.get("rarity", 1)
    reward_map = {1: 1, 2: 3, 3: 10, 4: 30, 5: 100, 6: 250}
    reward = reward_map.get(rarity, 1)
    if count <= 1:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏."
        try:
            if query.message.photo:
                await query.message.edit_caption(text)
            else:
                await query.edit_message_text(text)
        except Exception as e:
            try:
                await query.message.reply_text(text)
            except Exception as e2:
                print(f"[exchange_duplicate_callback] –û—à–∏–±–∫–∞: {e} | {e2}")
        return ConversationHandler.END
    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞
    keyboard = []
    for i in range(1, min(count, 10)+1):
        keyboard.append([InlineKeyboardButton(f"{i}", callback_data=f"exchange_select_{card_id}_{i}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"showcard_{card_id}")])
    text = f"–°–∫–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ <b>{card.get('name', '?')}</b> ({rarity}‚òÖ) –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å? (–î–æ—Å—Ç—É–ø–Ω–æ: {count-1})"
    try:
        if query.message.photo:
            await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    return EXCHANGE_SELECT

async def exchange_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.replace("exchange_select_", "")
    card_id, amount = data.rsplit("_", 1)
    amount = int(amount)
    user_id = query.from_user.id
    user = pb.get_user_by_telegram_id(user_id)
    user_cards = pb.get_user_inventory(user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    card = user_card.get("expand", {}).get("card_id", {}) if user_card else {}
    rarity = card.get("rarity", 1)
    reward_map = {1: 1, 2: 3, 3: 10, 4: 30, 5: 100, 6: 250}
    reward = reward_map.get(rarity, 1)
    if count <= 1 or amount < 1 or amount > (count-1):
        try:
            if query.message.photo:
                await query.message.edit_caption("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
            else:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        except Exception:
            await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return ConversationHandler.END
    context.user_data["exchange"] = {"card_id": card_id, "amount": amount, "reward": reward, "rarity": rarity, "name": card.get("name", "?")}
    text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å <b>{amount}</b> –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ <b>{card.get('name', '?')}</b> ({rarity}‚òÖ) –∑–∞ <b>{reward*amount} –∑–≤—ë–∑–¥</b>?\n–û—Å—Ç–∞–Ω–µ—Ç—Å—è: {count-amount}"
    keyboard = [
        [InlineKeyboardButton(f"‚úÖ –î–∞, —Å–¥–∞—Ç—å {amount}", callback_data=f"exchange_confirm_bulk_{card_id}_{amount}"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"showcard_{card_id}")]
    ]
    try:
        if query.message.photo:
            await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    return EXCHANGE_CONFIRM

async def exchange_confirm_bulk_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.replace("exchange_confirm_bulk_", "")
    card_id, amount = data.rsplit("_", 1)
    amount = int(amount)
    print(f"[exchange_confirm_bulk_callback] card_id:", card_id)
    user_id = query.from_user.id
    user = pb.get_user_by_telegram_id(user_id)
    user_cards = pb.get_user_inventory(user["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    print(f"[exchange_confirm_bulk_callback] user_card:", user_card)
    count = user_card.get("count", 0) if user_card else 0
    card = user_card.get("expand", {}).get("card_id", {}) if user_card else {}
    rarity = card.get("rarity", 1)
    reward_map = {1: 1, 2: 3, 3: 10, 4: 30, 5: 100, 6: 250}
    reward = reward_map.get(rarity, 1)
    if count <= 1 or amount < 1 or amount > (count-1):
        try:
            if query.message.photo:
                await query.message.edit_caption("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
            else:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        except Exception:
            await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return ConversationHandler.END
    url = f"{pb.base_url}/collections/user_cards/records/{user_card['id']}"
    httpx.patch(url, headers=pb.headers, json={"count": count-amount})
    await asyncio.sleep(0.3)
    pb.update_user_stars_and_pity(user["id"], user.get("stars", 0) + reward*amount, user.get("pity_legendary", 0), user.get("pity_void", 0))
    text = f"‚ôªÔ∏è –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{reward*amount} –∑–≤—ë–∑–¥</b>. –û—Å—Ç–∞–ª–æ—Å—å: {count-amount}"
    try:
        if query.message.photo:
            await query.message.edit_caption(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"showcard_refresh_{card_id}")]]))
        else:
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"showcard_refresh_{card_id}")]]))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"showcard_refresh_{card_id}")]]))
    context.user_data.pop("exchange", None)
    return ConversationHandler.END

# --- –ù–æ–≤—ã–π callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ ---
async def showcard_refresh_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("showcard_refresh_", "")
    print(f"[showcard_refresh_callback] card_id:", card_id)
    url = f"{pb.base_url}/collections/cards/records/{card_id}"
    resp = requests.get(url, headers=pb.headers)
    print(f"[showcard_refresh_callback] resp.status_code:", resp.status_code)
    if resp.status_code != 200:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        await inventory(update, context)
        return
    card = resp.json()
    user_id = query.from_user.id
    user_cards = pb.get_user_inventory(pb.get_user_by_telegram_id(user_id)["id"])
    user_card = next((c for c in user_cards if c.get("card_id") == card_id or (c.get("expand", {}).get("card_id", {}).get("id") == card_id)), None)
    count = user_card.get("count", 0) if user_card else 0
    can_auction = count > 0
    text = (
        f"<b>{card.get('name')}</b>\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{card.get('group')}</b>\n"
        f"–ê–ª—å–±–æ–º: <b>{card.get('album', '-')}</b>\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{card.get('rarity')}‚òÖ</b>\n"
        f"–í –Ω–∞–ª–∏—á–∏–∏: <b>{count}</b>"
    )
    keyboard = []
    if can_auction:
        keyboard.append([InlineKeyboardButton("üí∏ –í—ã–ª–æ–∂–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω", callback_data=f"auction_{card_id}")])
    if count > 1:
        keyboard.append([InlineKeyboardButton(f"‚ôªÔ∏è –°–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç ({count-1})", callback_data=f"exchange_{card_id}")])
    # –ö–Ω–æ–ø–∫–∞ –æ–±–º–µ–Ω–∞
    if count > 0:
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–º–µ–Ω—è—Ç—å—Å—è", callback_data=f"trade_start_{card_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory")])
    overlayed_path = apply_overlay(card.get("image_url"), card.get("rarity"))
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if query.message and query.message.photo:
        try:
            await query.message.delete()
        except Exception:
            pass
        if overlayed_path:
            with open(overlayed_path, "rb") as img_file:
                await query.message.reply_photo(img_file, caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
            os.unlink(overlayed_path)
        elif card.get("image_url"):
            await query.message.reply_photo(card.get("image_url"), caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        if overlayed_path:
            with open(overlayed_path, "rb") as img_file:
                await query.message.reply_photo(img_file, caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
            os.unlink(overlayed_path)
        elif card.get("image_url"):
            await query.message.reply_photo(card.get("image_url"), caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

async def achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    target = get_reply_target(update, prefer_edit=hasattr(update, 'callback_query') and update.callback_query is not None)
    if not pb_user:
        await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    achs = []
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    url = f"{pb.base_url}/collections/collection_achievements/records"
    params = {"filter": f'user_id="{pb_user["id"]}"', "perPage": 200}
    import httpx
    resp = httpx.get(url, headers=pb.headers, params=params)
    resp.raise_for_status()
    items = resp.json().get("items", [])
    if not items:
        await target.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º.")
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ –∏ –∞–ª—å–±–æ–º—É
    items.sort(key=lambda x: (x.get("group", ""), x.get("album", "")))
    text = "<b>üèÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:</b>\n"
    for ach in items:
        group = ach.get("group", "-")
        album = ach.get("album", "-")
        level = ach.get("level", 0)
        if level > 0:
            text += f"\n<b>{group}</b> ‚Äî <b>{album}</b>: <b>{level*25}%</b>"
    if hasattr(target, 'edit_text'):
        await target.edit_text(text, parse_mode="HTML")
    else:
        await target.reply_text(text, parse_mode="HTML")

async def send_daily_bonus_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    import uuid
    pb = PBClient()
    bot = context.bot
    bot_username = 'kpop_gacha_bot'  # –∏–ª–∏ –ø–æ–ª—É—á–∏ —á–µ—Ä–µ–∑ await bot.get_me()
    users = pb.get_all_users()
    count = 0
    for user in users:
        user_id = user["id"]
        tg_id = user["telegram_id"]
        token = str(uuid.uuid4())
        pb.set_daily_bonus_token(user_id, token)
        link = f"https://t.me/{bot_username}?start=bonus_{tg_id}_{token}"
        try:
            await bot.send_message(
                chat_id=int(tg_id),
                text=f"üåü –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å! –ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 25 –∑–≤—ë–∑–¥!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', url=link)]]),
                parse_mode=ParseMode.HTML
            )
            count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
    await update.message.reply_text(f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

async def banner_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    if not pb_user:
        target = get_reply_target(update, prefer_edit=True)
        await target.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return ConversationHandler.END
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    all_cards = pb.get_all_cards()
    group_set = set(c.get("group", "-") for c in all_cards if c.get("group"))
    keyboard = [[InlineKeyboardButton(g, callback_data=f"banner_group_{g}")] for g in sorted(group_set)]
    keyboard.append([InlineKeyboardButton("üåê –û–±—â–∏–π –±–∞–Ω–Ω–µ—Ä (–≤—Å–µ –∫–∞—Ä—Ç—ã)", callback_data="banner_reset")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")])
    target = get_reply_target(update, prefer_edit=True)
    await target.reply_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞:</b>", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    return BANNER_GROUP

async def banner_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    group = query.data.replace("banner_group_", "")
    all_cards = pb.get_all_cards()
    group_norm = group.strip().lower()
    print(f"DEBUG: –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–ø–ø—ã {group}")
    for c in all_cards:
        if c.get("group") and c.get("group").strip().lower() == group_norm:
            print("  –ê–ª—å–±–æ–º:", repr(c.get("album")))
    album_set = set(
        c.get("album", "-")
        for c in all_cards
        if c.get("group") and c.get("group").strip().lower() == group_norm and c.get("album")
    )
    keyboard = [[InlineKeyboardButton(a, callback_data=f"banner_album_{group}__{a}")] for a in sorted(album_set)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="banner")])
    await query.edit_message_text(f"<b>–ì—Ä—É–ø–ø–∞:</b> <b>{group}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    return BANNER_ALBUM

async def banner_album_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.replace("banner_album_", "")
    group, album = data.split("__", 1)
    context.user_data["banner"] = {"group": group, "album": album}
    keyboard = [
        [InlineKeyboardButton(f"‚úÖ –ö—Ä—É—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ {album} ({group})", callback_data="banner_confirm")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"banner_group_{group}")]
    ]
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–∞–Ω–Ω–µ—Ä: <b>{group}</b> ‚Äî <b>{album}</b>\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    return BANNER_CONFIRM

async def banner_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    banner = context.user_data.get("banner")
    if not banner:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–Ω–µ—Ä–∞.")
        return ConversationHandler.END
    pb.set_active_banner(pb_user["id"], banner["group"], banner["album"])
    await query.edit_message_text(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –ø—É–ª–ª—ã –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∞–ª—å–±–æ–º—É <b>{banner['album']}</b> –≥—Ä—É–ø–ø—ã <b>{banner['group']}</b>!", parse_mode="HTML", reply_markup=back_keyboard())
    return ConversationHandler.END

async def banner_reset_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    pb_user = pb.get_user_by_telegram_id(user.id)
    pb.reset_active_banner(pb_user["id"])
    await query.edit_message_text("üåê –ë–∞–Ω–Ω–µ—Ä —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –ø—É–ª–ª—ã –∏–¥—É—Ç –ø–æ –≤—Å–µ–º –∫–∞—Ä—Ç–∞–º!", parse_mode="HTML", reply_markup=back_keyboard())
    return ConversationHandler.END

async def trade_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    card_id = query.data.replace("trade_start_", "")
    context.user_data["trade"] = {"my_card_id": card_id}
    text = (
        "<b>–û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏</b>\n"
        "–° –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è?\n"
        "<i>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ username/id –≤ —á–∞—Ç.</i>"
    )
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trade_cancel")]]
    try:
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception:
        await query.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    return TRADE_SELECT_USER

async def trade_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        await query.edit_message_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    except Exception:
        await query.message.reply_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    context.user_data.pop("trade", None)
    return ConversationHandler.END

async def trade_user_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    trade = context.user_data.get("trade", {})
    if update.message.reply_to_message:
        other_user = update.message.reply_to_message.from_user
    else:
        text = update.message.text.strip()
        other_user = None
        if text.startswith("@"):  # username
            try:
                other_user = await context.bot.get_chat(text)
            except Exception:
                pass
        elif text.isdigit():  # id
            try:
                other_user = await context.bot.get_chat(int(text))
            except Exception:
                pass
    if not other_user or other_user.id == user.id:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return TRADE_SELECT_USER
    trade["other_user_id"] = other_user.id
    context.user_data["trade"] = trade
    pb_other = pb.get_user_by_telegram_id(other_user.id)
    if not pb_other:
        await update.message.reply_text("–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ—Ç–µ.")
        return TRADE_SELECT_USER
    other_cards = pb.get_user_inventory(pb_other["id"])
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö count > 0
    card_list = [c for c in other_cards if c.get("expand", {}).get("card_id", {}) and c.get("count", 0) > 0]
    if not card_list:
        await update.message.reply_text("–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return ConversationHandler.END
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ context.user_data
    context.user_data["trade_other_cards"] = card_list
    context.user_data["trade_page"] = 0
    await show_trade_page(update, context, other_user, 0)
    return TRADE_SELECT_OTHER_CARD

async def show_trade_page(update, context, other_user, page):
    card_list = context.user_data.get("trade_other_cards", [])
    total = len(card_list)
    start = page * TRADE_PAGE_SIZE
    end = start + TRADE_PAGE_SIZE
    page_cards = card_list[start:end]
    card_buttons = []
    for c in page_cards:
        card = c.get("expand", {}).get("card_id", {})
        btn_text = f"{card.get('name', '???')} ‚Äî {card.get('rarity', '?')}‚òÖ"
        card_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"trade_select_other_{card.get('id')}")])
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="trade_page_prev"))
    if end < total:
        nav_buttons.append(InlineKeyboardButton("‚è© –î–∞–ª–µ–µ", callback_data="trade_page_next"))
    if nav_buttons:
        card_buttons.append(nav_buttons)
    card_buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trade_cancel")])
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É @{other_user.username or other_user.id} (—Å—Ç—Ä. {page+1}/{(total-1)//TRADE_PAGE_SIZE+1}):"
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ‚Äî reply, –∏–Ω–∞—á–µ edit
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(card_buttons))
    else:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(card_buttons))
        except Exception:
            await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(card_buttons))

async def trade_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    page = context.user_data.get("trade_page", 0)
    if query.data == "trade_page_next":
        page += 1
    elif query.data == "trade_page_prev":
        page = max(0, page - 1)
    context.user_data["trade_page"] = page
    trade = context.user_data.get("trade", {})
    other_user_id = trade.get("other_user_id")
    if not other_user_id:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return ConversationHandler.END
    other_user = await context.bot.get_chat(other_user_id)
    await show_trade_page(update, context, other_user, page)
    return TRADE_SELECT_OTHER_CARD

async def trade_select_other_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    card_id = query.data.replace("trade_select_other_", "")
    trade = context.user_data.get("trade", {})
    trade["other_card_id"] = card_id
    context.user_data["trade"] = trade
    user = update.effective_user
    other_user_id = trade["other_user_id"]
    pb_other = pb.get_user_by_telegram_id(other_user_id)
    pb_user = pb.get_user_by_telegram_id(user.id)
    my_card = None
    other_card = None
    my_cards = pb.get_user_inventory(pb_user["id"])
    for c in my_cards:
        card = c.get("expand", {}).get("card_id", {})
        if card.get("id") == trade["my_card_id"]:
            my_card = card
            break
    other_cards = pb.get_user_inventory(pb_other["id"])
    for c in other_cards:
        card = c.get("expand", {}).get("card_id", {})
        if card.get("id") == trade["other_card_id"]:
            other_card = card
            break
    if not my_card or not other_card:
        try:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.")
        except Exception:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.")
        return ConversationHandler.END
    trade_data[other_user_id] = {
        "from_user_id": user.id,
        "my_card_id": trade["my_card_id"],
        "other_card_id": trade["other_card_id"]
    }
    text = (
        f"<b>–í–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –æ–±–º–µ–Ω!</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user.full_name}</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω—è—Ç—å—Å—è:\n"
        f"–û—Ç–¥–∞—ë—Ç: <b>{other_card.get('name', '?')}</b> ({other_card.get('rarity', '?')}‚òÖ)\n"
        f"–í–∑–∞–º–µ–Ω —Ö–æ—á–µ—Ç: <b>{my_card.get('name', '?')}</b> ({my_card.get('rarity', '?')}‚òÖ)\n"
        f"–ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="trade_accept"), InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="trade_decline")]
    ]
    try:
        await context.bot.send_message(chat_id=other_user_id, text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        await query.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        try:
            await query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
        except Exception:
            await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
    return ConversationHandler.END

async def trade_accept_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    trade = trade_data.pop(user_id, None)
    if not trade:
        await query.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
        return ConversationHandler.END
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ–±–æ–∏—Ö –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    pb_user = pb.get_user_by_telegram_id(trade["from_user_id"])
    pb_other = pb.get_user_by_telegram_id(user_id)
    my_cards = pb.get_user_inventory(pb_user["id"])
    other_cards = pb.get_user_inventory(pb_other["id"])
    my_card = next((c for c in my_cards if c.get("expand", {}).get("card_id", {}).get("id") == trade["my_card_id"] and c.get("count", 0) > 0), None)
    other_card = next((c for c in other_cards if c.get("expand", {}).get("card_id", {}).get("id") == trade["other_card_id"] and c.get("count", 0) > 0), None)
    print(f"[trade_accept_callback] my_card: {my_card}")
    print(f"[trade_accept_callback] other_card: {other_card}")
    if not my_card or not other_card:
        await query.edit_message_text("–û–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –∏–≥—Ä–æ–∫–∞. –û–±–º–µ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return ConversationHandler.END
    # –°–æ–≤–µ—Ä—à–∞–µ–º –æ–±–º–µ–Ω: —É–º–µ–Ω—å—à–∞–µ–º count —É –æ–±–æ–∏—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥—Ä—É–≥–æ–º—É
    pb.add_card_to_user(pb_user["id"], trade["other_card_id"])
    pb.add_card_to_user(pb_other["id"], trade["my_card_id"])
    # –£–º–µ–Ω—å—à–∞–µ–º count —É –æ–±–æ–∏—Ö
    url1 = f"{pb.base_url}/collections/user_cards/records/{my_card['id']}"
    url2 = f"{pb.base_url}/collections/user_cards/records/{other_card['id']}"
    print(f"[trade_accept_callback] PATCH {url1} count: {my_card['count']} -> {my_card['count']-1}")
    print(f"[trade_accept_callback] PATCH {url2} count: {other_card['count']} -> {other_card['count']-1}")
    httpx.patch(url1, headers=pb.headers, json={"count": my_card["count"] - 1})
    httpx.patch(url2, headers=pb.headers, json={"count": other_card["count"] - 1})
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    my_cards_after = pb.get_user_inventory(pb_user["id"])
    other_cards_after = pb.get_user_inventory(pb_other["id"])
    print(f"[trade_accept_callback] my_cards_after: {[{'id':c.get('expand',{}).get('card_id',{}).get('id'), 'count':c.get('count')} for c in my_cards_after]}")
    print(f"[trade_accept_callback] other_cards_after: {[{'id':c.get('expand',{}).get('card_id',{}).get('id'), 'count':c.get('count')} for c in other_cards_after]}")
    await query.edit_message_text("–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! –ö–∞—Ä—Ç–æ—á–∫–∏ –æ–±–º–µ–Ω—è–ª–∏—Å—å –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏.")
    # –û–ø–æ–≤–µ—â–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    try:
        await context.bot.send_message(chat_id=pb_user["telegram_id"], text="–í–∞—à –æ–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!", parse_mode="HTML")
    except Exception:
        pass
    return ConversationHandler.END

async def trade_decline_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    trade = trade_data.pop(user_id, None)
    await query.edit_message_text("–û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    # –û–ø–æ–≤–µ—â–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    if trade:
        try:
            pb_user = pb.get_user_by_telegram_id(trade["from_user_id"])
            await context.bot.send_message(chat_id=pb_user["telegram_id"], text="–í–∞—à –æ–±–º–µ–Ω –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.", parse_mode="HTML")
        except Exception:
            pass
    return ConversationHandler.END

# ConversationHandler –¥–ª—è –æ–±–º–µ–Ω–∞
trade_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(trade_start_callback, pattern="^trade_start_")],
    states={
        TRADE_SELECT_USER: [MessageHandler(filters.REPLY | filters.TEXT & ~filters.COMMAND, trade_user_select)],
        TRADE_SELECT_OTHER_CARD: [CallbackQueryHandler(trade_select_other_card_callback, pattern="^trade_select_other_.*"),
                                 CallbackQueryHandler(trade_page_callback, pattern="^trade_page_(next|prev)$")],
    },
    fallbacks=[CallbackQueryHandler(trade_cancel_callback, pattern="^trade_cancel")],
)

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    addcard_conv = ConversationHandler(
        entry_points=[CommandHandler("addcard", addcard_start)],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_name)],
            ADD_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_group)],
            ADD_ALBUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_album)],
            ADD_RARITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_rarity)],
            ADD_IMAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, addcard_image)],
            ADD_CONFIRM: [CallbackQueryHandler(addcard_confirm, pattern="^addcard_(yes|no)$")],
        },
        fallbacks=[CommandHandler("cancel", addcard_cancel)],
    )
    auction_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(auction_start_callback, pattern="^auction_")],
        states={
            AUCTION_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, auction_price)],
            AUCTION_DURATION: [CallbackQueryHandler(auction_duration, pattern="^auction_dur_\\d+")],
            AUCTION_CONFIRM: [CallbackQueryHandler(auction_confirm, pattern="^auction_(yes|no)$")],
        },
        fallbacks=[],
    )
    promo_conv = ConversationHandler(
        entry_points=[CommandHandler("promo", promo_start)],
        states={
            PROMO_ENTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, promo_enter)],
        },
        fallbacks=[CommandHandler("cancel", promo_cancel)],
    )
    addpromo_conv = ConversationHandler(
        entry_points=[CommandHandler("addpromo", addpromo_start)],
        states={
            ADD_PROMO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, addpromo_code)],
            ADD_PROMO_REWARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, addpromo_reward)],
            ADD_PROMO_LIMIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, addpromo_limit)],
        },
        fallbacks=[CommandHandler("cancel", addpromo_cancel)],
    )
    exchange_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(exchange_duplicate_callback, pattern="^exchange_")],
        states={
            EXCHANGE_SELECT: [CallbackQueryHandler(exchange_select_callback, pattern="^exchange_select_.*")],
            EXCHANGE_CONFIRM: [CallbackQueryHandler(exchange_confirm_bulk_callback, pattern="^exchange_confirm_bulk_.*")],
        },
        fallbacks=[CallbackQueryHandler(showcard_callback, pattern="^showcard_")],
    )
    app.add_handler(trade_conv)
    app.add_handler(CallbackQueryHandler(trade_accept_callback, pattern="^trade_accept$"))
    app.add_handler(CallbackQueryHandler(trade_decline_callback, pattern="^trade_decline$"))
    app.add_handler(exchange_conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("pull", pull))
    app.add_handler(CommandHandler("pull10", pull10))
    app.add_handler(CommandHandler("inventory", inventory))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("pity", pity))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("settings", settings))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("auctions", auctions))
    app.add_handler(CommandHandler("drop100", drop100))
    app.add_handler(CommandHandler("achievements", achievements))
    app.add_handler(CommandHandler("senddailybonus", send_daily_bonus_links))
    app.add_handler(CommandHandler("banner", banner_start))
    app.add_handler(CallbackQueryHandler(banner_group_callback, pattern="^banner_group_"))
    app.add_handler(CallbackQueryHandler(banner_album_callback, pattern="^banner_album_"))
    app.add_handler(CallbackQueryHandler(banner_confirm_callback, pattern="^banner_confirm$"))
    app.add_handler(CallbackQueryHandler(banner_reset_callback, pattern="^banner_reset$"))
    app.add_handler(CallbackQueryHandler(inventory_group_callback, pattern="^invgroup_"))
    app.add_handler(CallbackQueryHandler(inventory_album_callback, pattern="^invalbum_"))
    app.add_handler(CallbackQueryHandler(showcard_callback, pattern="^showcard_"))
    app.add_handler(CallbackQueryHandler(buyauction_callback, pattern="^buyauction_"))
    app.add_handler(CallbackQueryHandler(showcard_refresh_callback, pattern="^showcard_refresh_"))
    app.add_handler(CallbackQueryHandler(menu_callback))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, group_message_handler))
    app.add_handler(addcard_conv)
    app.add_handler(auction_conv)
    app.add_handler(promo_conv)
    app.add_handler(addpromo_conv)
    app.run_polling()

if __name__ == "__main__":
    main() 