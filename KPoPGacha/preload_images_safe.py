#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
"""

import os
import hashlib
import requests
import time
import random
from pb_client import PBClient

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
CACHE_DIR = "image_cache"
if not os.path.exists(CACHE_DIR):
    os.makedirs(CACHE_DIR)

def get_cached_image_path(image_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    if not image_url:
        return None
    
    # –°–æ–∑–¥–∞–µ–º —Ö–µ—à URL –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    url_hash = hashlib.md5(image_url.encode()).hexdigest()
    cache_path = os.path.join(CACHE_DIR, f"{url_hash}.jpg")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if os.path.exists(cache_path):
        return cache_path
    
    return None

def download_image(image_url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    if not image_url:
        return None
    
    # –°–æ–∑–¥–∞–µ–º —Ö–µ—à URL –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    url_hash = hashlib.md5(image_url.encode()).hexdigest()
    cache_path = os.path.join(CACHE_DIR, f"{url_hash}.jpg")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if os.path.exists(cache_path):
        return cache_path
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    try:
        print(f"–°–∫–∞—á–∏–≤–∞—é: {image_url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(image_url, timeout=60, headers=headers)
        response.raise_for_status()
        
        with open(cache_path, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cache_path}")
        return cache_path
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {image_url}: {e}")
        return None

def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    pb = PBClient()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    print("üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –±–∞–∑—ã...")
    all_cards = pb.get_all_cards()
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_urls = set()
    for card in all_cards:
        if card.get("image_url"):
            image_urls.add(card["image_url"])
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(image_urls)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    downloaded = 0
    skipped = 0
    failed = 0
    
    for i, image_url in enumerate(image_urls, 1):
        print(f"\n[{i}/{len(image_urls)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∫—ç—à–µ
        if get_cached_image_path(image_url):
            print(f"‚è≠Ô∏è  –£–∂–µ –≤ –∫—ç—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            skipped += 1
            continue
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        result = download_image(image_url)
        if result:
            downloaded += 1
        else:
            failed += 1
        
        # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (2-5 —Å–µ–∫—É–Ω–¥)
        if i < len(image_urls):
            delay = random.uniform(2.0, 5.0)
            print(f"‚è≥ –ñ–¥—É {delay:.1f} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
        
        # –ö–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–µ–ª–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
        if i % 10 == 0 and i < len(image_urls):
            long_delay = random.uniform(10.0, 20.0)
            print(f"üõë –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ {long_delay:.1f} —Å–µ–∫—É–Ω–¥...")
            time.sleep(long_delay)
    
    print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üì• –°–∫–∞—á–∞–Ω–æ: {downloaded}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –≤ –∫—ç—à–µ): {skipped}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"üìÅ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {CACHE_DIR}")

if __name__ == "__main__":
    main() 